/* eslint-disable no-unused-vars */
import { Component, h, Prop, State, Watch } from '@stencil/core';
import uxFactory from '../../assets/UxFactory.js';
/**
 * Main class for the component
 */
export class ZeaParamWidgetVec2 {
  /**
   * Class constructor
   */
  constructor() {
    this.onInput = this.onInput.bind(this);
    this.onBlur = this.onBlur.bind(this);
    if (!globalThis.zeaEngine) {
      console.warn('`zeaEngine` missing from the `globalThis` object and this component requires it');
    }
  }
  /**
   * Reinit input when paramater changes
   */
  parameterChangeHandler() {
    this.setUpInputs();
  }
  /**
   * Run when component loads
   */
  componentDidLoad() {
    if (this.parameter) {
      this.setUpInputs();
      this.updateComponent();
    }
  }
  /**
   * Set the inputs up
   */
  setUpInputs() {
    this.parameter.on('valueChanged', () => {
      this.updateComponent();
    });
  }
  /**
   * Value change handler
   */
  updateComponent() {
    if (!this.parameterChange) {
      const vec2 = this.parameter.getValue();
      this.xField.value = `${this.round(vec2.x)}`;
      this.yField.value = `${this.round(vec2.y)}`;
    }
  }
  /**
   * Input handler
   */
  onInput() {
    if (!globalThis.zeaEngine) {
      console.log('`zeaEngine` missing from `globalThis` object.');
      return;
    }
    const { Vec2 } = globalThis.zeaEngine;
    const value = new Vec2(this.xField.valueAsNumber, this.yField.valueAsNumber);
    this.handleUXChange(value);
  }
  /**
   * Change handler
   */
  onBlur() {
    this.parameterChange = undefined;
  }
  /**
   * Handles the creation of the UX Change object and the UndoRedoManager
   *
   * @param {Parameter} value - Parameter object
   */
  handleUXChange(value) {
    if (!globalThis.zeaUx) {
      console.log('To add Undo/Redo functionalities just add `zeaUx` library to your `globalThis` object, because right now it is missing.');
      return;
    }
    const { UndoRedoManager, ParameterValueChange } = globalThis.zeaUx;
    const undoRedoManager = UndoRedoManager.getInstance();
    if (!this.parameterChange) {
      this.parameterChange = new ParameterValueChange(this.parameter, value);
      undoRedoManager.addChange(this.parameterChange);
    }
    else {
      this.parameterChange.update({ value });
    }
  }
  /**
   * Round number
   * @param {number} value Number to be rounded
   * @param {number} decimals Number of decimal places
   * @return {number} Rounded number
   */
  round(value, decimals = 6) {
    return Number(Math.round(Number(value + 'e' + decimals)) + 'e-' + decimals);
  }
  /**
   * Render method.
   * @return {JSX} The generated html
   */
  render() {
    return (h("div", { class: "zea-param-widget-vec2" },
      h("div", { class: "vector-input-wrap" },
        h("label", null, "X"),
        h("input", { onInput: this.onInput, onBlur: this.onBlur, ref: (el) => (this.xField = el), id: this.parameter.getName(), type: "number", pattern: "-?[0-9]*(.[0-9]+)?", tabindex: "0", value: this.xValue })),
      h("div", { class: "vector-input-wrap" },
        h("label", null, "Y"),
        h("input", { onInput: this.onInput, onBlur: this.onBlur, ref: (el) => (this.yField = el), id: this.parameter.getName(), type: "number", pattern: "-?[0-9]*(.[0-9]+)?", tabindex: "0", value: this.yValue }))));
  }
  static get is() { return "zea-param-widget-vec2"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["zea-param-widget-vec2.css"]
  }; }
  static get styleUrls() { return {
    "$": ["zea-param-widget-vec2.css"]
  }; }
  static get properties() { return {
    "parameter": {
      "type": "any",
      "mutable": false,
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Parameter to be edited"
      },
      "attribute": "parameter",
      "reflect": false
    },
    "appData": {
      "type": "any",
      "mutable": false,
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The application data"
      },
      "attribute": "app-data",
      "reflect": false
    }
  }; }
  static get states() { return {
    "xValue": {},
    "yValue": {}
  }; }
  static get watchers() { return [{
      "propName": "parameter",
      "methodName": "parameterChangeHandler"
    }]; }
}
uxFactory.registerWidget('zea-param-widget-vec2', (p) => p.getDataType() === 'Vec2');
