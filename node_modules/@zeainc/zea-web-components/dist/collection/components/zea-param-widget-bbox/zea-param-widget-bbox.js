/* eslint-disable require-jsdoc */
/* eslint-disable no-unused-vars */
import { Component, Prop, h } from '@stencil/core';
import uxFactory from '../../assets/UxFactory.js';
/**
 * BBox Parameter component
 */
export class ZeaParamWidgetBBox {
  constructor() {
    /**
     * Object that hosts undoRedo instance, parameter class and parameter change class.
     * These last two so we can reconstruct the component dynamically.
     */
    this.appData = {};
    this.onInput = this.onInput.bind(this);
    this.onBlur = this.onBlur.bind(this);
    if (!globalThis.zeaEngine) {
      console.warn('`zeaEngine` missing from the `globalThis` object and this component requires it');
    }
  }
  /**
   * Called once just after the component fully loaded and the first render() occurs
   */
  componentDidLoad() {
    if (this.parameter) {
      this.handleComponentUpdate();
      this.updateComponent();
    }
  }
  /**
   * Configures the component to react to `valueChanged` events in the parameter.
   */
  handleComponentUpdate() {
    this.parameter.on('valueChanged', () => {
      this.updateComponent();
    });
  }
  /**
   * Updates component field values with parameter's.
   */
  updateComponent() {
    if (!this.parameterChange) {
      const bBox = this.parameter.getValue();
      if (bBox.isValid()) {
        this.minXField.value = bBox.p0.x;
        this.minYField.value = bBox.p0.y;
        this.minZField.value = bBox.p0.z;
        this.maxXField.value = bBox.p1.x;
        this.maxYField.value = bBox.p1.y;
        this.maxZField.value = bBox.p1.z;
      }
    }
  }
  /**
   * Handles updates of the input fields
   */
  onInput() {
    // Create parameter instance
    if (!globalThis.zeaEngine) {
      console.log('`zeaEngine` missing from `globalThis` object.');
      return;
    }
    const { Box3 } = globalThis.zeaEngine;
    const value = new Box3();
    value.p0.set(this.minXField.valueAsNumber, this.minYField.valueAsNumber, this.minZField.valueAsNumber);
    value.p1.set(this.maxXField.valueAsNumber, this.maxYField.valueAsNumber, this.maxZField.valueAsNumber);
    this.handleUXChange(value);
  }
  /**
   * Handles the lost of focus of the input field.
   * Used to commit the `ParameterValueChange` object to the `UndoRedoManager`
   */
  onBlur() {
    this.parameterChange = undefined;
  }
  /**
   * Handles the creation of the UX Change object and the UndoRedoManager
   *
   * @param {Parameter} value - Parameter object
   */
  handleUXChange(value) {
    if (!globalThis.zeaUx) {
      console.log('To add Undo/Redo functionalities just add `zeaUx` library to your `globalThis` object, because right now it is missing.');
      return;
    }
    const { UndoRedoManager, ParameterValueChange } = globalThis.zeaUx;
    const undoRedoManager = UndoRedoManager.getInstance();
    if (!this.parameterChange) {
      this.parameterChange = new ParameterValueChange(this.parameter, value);
      undoRedoManager.addChange(this.parameterChange);
    }
    else {
      this.parameterChange.update({ value });
    }
  }
  /**
   * Render method
   *
   * @return {JSX} The generated html
   */
  render() {
    var _a, _b, _c, _d, _e, _f;
    return (h("div", { class: "zea-param-widget-bbox" },
      h("fieldset", null,
        h("legend", null, "Min"),
        h("div", { class: "input-wrap" },
          h("label", null, "X"),
          h("input", { onInput: this.onInput, onBlur: this.onBlur, id: `${((_a = this === null || this === void 0 ? void 0 : this.parameter) === null || _a === void 0 ? void 0 : _a.getName()) || 'Box3Parameter'}_minX`, ref: (el) => (this.minXField = el), type: "number", pattern: "-?[0-9]*(.[0-9]+)?" })),
        h("div", { class: "input-wrap" },
          h("label", null, "Y"),
          h("input", { onInput: this.onInput, onBlur: this.onBlur, id: `${((_b = this === null || this === void 0 ? void 0 : this.parameter) === null || _b === void 0 ? void 0 : _b.getName()) || 'Box3Parameter'}_minY`, ref: (el) => (this.minYField = el), type: "number", pattern: "-?[0-9]*(.[0-9]+)?" })),
        h("div", { class: "input-wrap" },
          h("label", null, "Z"),
          h("input", { onInput: this.onInput, onBlur: this.onBlur, id: `${((_c = this === null || this === void 0 ? void 0 : this.parameter) === null || _c === void 0 ? void 0 : _c.getName()) || 'Box3Parameter'}_minZ`, ref: (el) => (this.minZField = el), type: "number", pattern: "-?[0-9]*(.[0-9]+)?" }))),
      h("fieldset", null,
        h("legend", null, "Max"),
        h("div", { class: "input-wrap" },
          h("label", null, "X"),
          h("input", { onInput: this.onInput, onBlur: this.onBlur, id: `${((_d = this === null || this === void 0 ? void 0 : this.parameter) === null || _d === void 0 ? void 0 : _d.getName()) || 'Box3Parameter'}_maxX`, ref: (el) => (this.maxXField = el), type: "number", pattern: "-?[0-9]*(.[0-9]+)?" })),
        h("div", { class: "input-wrap" },
          h("label", null, "Y"),
          h("input", { onInput: this.onInput, onBlur: this.onBlur, id: `${((_e = this === null || this === void 0 ? void 0 : this.parameter) === null || _e === void 0 ? void 0 : _e.getName()) || 'Box3Parameter'}_maxY`, ref: (el) => (this.maxYField = el), type: "number", pattern: "-?[0-9]*(.[0-9]+)?" })),
        h("div", { class: "input-wrap" },
          h("label", null, "Z"),
          h("input", { onInput: this.onInput, onBlur: this.onBlur, id: `${((_f = this === null || this === void 0 ? void 0 : this.parameter) === null || _f === void 0 ? void 0 : _f.getName()) || 'Box3Parameter'}_maxZ`, ref: (el) => (this.maxZField = el), type: "number", pattern: "-?[0-9]*(.[0-9]+)?" })))));
  }
  static get is() { return "zea-param-widget-bbox"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["zea-param-widget-bbox.css"]
  }; }
  static get styleUrls() { return {
    "$": ["zea-param-widget-bbox.css"]
  }; }
  static get properties() { return {
    "parameter": {
      "type": "any",
      "mutable": false,
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Parameter being parsed"
      },
      "attribute": "parameter",
      "reflect": false
    },
    "appData": {
      "type": "unknown",
      "mutable": true,
      "complexType": {
        "original": "object",
        "resolved": "object",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Object that hosts undoRedo instance, parameter class and parameter change class.\nThese last two so we can reconstruct the component dynamically."
      },
      "defaultValue": "{}"
    }
  }; }
}
uxFactory.registerWidget('zea-param-widget-bbox', (p) => p.getDataType() === 'Box3');
