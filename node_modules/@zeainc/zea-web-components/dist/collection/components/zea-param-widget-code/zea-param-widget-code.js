/* eslint-disable no-unused-vars */
import { Component, h, Prop, Listen, State } from '@stencil/core';
import uxFactory from '../../assets/UxFactory.js';
import 'brace';
/**
 * Main class for the component
 */
export class ZeaParamWidgetCode {
  /**
   * Class constructor
   */
  constructor() {
    this.onInput = this.onInput.bind(this);
    if (!globalThis.zeaEngine) {
      console.warn('`zeaEngine` missing from the `globalThis` object and this component requires it');
    }
  }
  /**
   * Listen CTRL + s for save
   * @param {any} event the keydown event
   */
  keydownHandler(event) {
    if (event.ctrlKey && event.key == 's') {
      this.onInput();
      event.preventDefault();
    }
    else if (event.key == 'Enter' || event.keyCode == 46) {
      // on Enter or Backspace
      this.resetEditorHeight();
    }
    event.stopPropagation();
  }
  /**
   * Run when component loads
   */
  componentDidLoad() {
    this.handleComponentUpdate();
    this.updateComponent();
  }
  /**
   * Set up ACE code input
   */
  async handleComponentUpdate() {
    this.editor = ace.edit(this.editorContainer);
    await import('brace/theme/chrome.js');
    this.editor.setTheme('ace/theme/chrome');
    await import('brace/mode/javascript.js');
    this.editor.session.setMode('ace/mode/javascript');
    this.parameter.on('valueChanged', () => {
      this.updateComponent();
    });
  }
  /**
   * Input handler
   */
  onInput() {
    if (!globalThis.zeaEngine) {
      console.log('`zeaEngine` missing from `globalThis` object.');
      return;
    }
    const value = this.editor.getValue();
    this.handleUXChange(value);
    this.resetEditorHeight();
  }
  /**
   * Handles the creation of the UX Change object and the UndoRedoManager
   *
   * @param {Parameter} value - Parameter object
   */
  handleUXChange(value) {
    if (!globalThis.zeaUx) {
      console.log('To add Undo/Redo functionalities just add `zeaUx` library to your `globalThis` object, because right now it is missing.');
      return;
    }
    const { UndoRedoManager, ParameterValueChange } = globalThis.zeaUx;
    const undoRedoManager = UndoRedoManager.getInstance();
    const change = new ParameterValueChange(this.parameter, value);
    undoRedoManager.addChange(change);
  }
  /**
   * Reset editor to content's height
   */
  resetEditorHeight() {
    /* this.editorHeight =
      this.editor.getSession().getScreenLength() *
        this.editor.renderer.lineHeight +
      this.editor.renderer.scroller.getWidth() +
      30 */
  }
  /**
   * Called after component render
   */
  componentDidRender() {
    if (this.editor)
      this.editor.resize();
  }
  /**
   * Value change handler
   */
  updateComponent() {
    if (!this.parameterChange) {
      this.editor.session.setValue(this.parameter.getValue());
    }
    this.resetEditorHeight();
  }
  /**
   * Render method.
   * @return {JSX} The generated html
   */
  render() {
    return (h("div", { class: "zea-param-widget-code" },
      h("div", { style: { height: `${this.editorHeight}px` }, class: "editor-container", ref: (el) => (this.editorContainer = el) })));
  }
  static get is() { return "zea-param-widget-code"; }
  static get originalStyleUrls() { return {
    "$": ["zea-param-widget-code.css"]
  }; }
  static get styleUrls() { return {
    "$": ["zea-param-widget-code.css"]
  }; }
  static get properties() { return {
    "parameter": {
      "type": "any",
      "mutable": false,
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Parameter to be edited"
      },
      "attribute": "parameter",
      "reflect": false
    },
    "appData": {
      "type": "any",
      "mutable": false,
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The application data"
      },
      "attribute": "app-data",
      "reflect": false
    }
  }; }
  static get states() { return {
    "editorHeight": {}
  }; }
  static get listeners() { return [{
      "name": "keydown",
      "method": "keydownHandler",
      "target": undefined,
      "capture": false,
      "passive": false
    }]; }
}
uxFactory.registerWidget('zea-param-widget-code', (p) => p.getDataType() === 'Box3' && 'getLanguage' in p);
