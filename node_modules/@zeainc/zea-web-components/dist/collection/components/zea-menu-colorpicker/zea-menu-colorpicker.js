import { Component, h, Prop } from '@stencil/core';
/**
 * Main class for the component
 */
export class ZeaMenuColorpicker {
  constructor() {
    this.colorElements = [];
    this.shown = false;
    this.userColor = null;
  }
  /**
   * Handler for click events on the whole window
   * @param {any} e the event
   */
  handleDropDownColorClick(e) {
    if (e.target == this.currentColor)
      return;
    if (e.target.tagName == 'ZEA-MENU-COLOR') {
      if (this.currentColorSample) {
        this.currentColorSample.classList.remove('active');
      }
      this.currentColorSample = e.target;
      this.currentColorSample.classList.add('active');
      if (this.currentColor)
        this.currentColor.remove();
      this.currentColor = this.currentColorSample.cloneNode(true);
      this.currentColorContainer.appendChild(this.currentColor);
      this.setActiveColors(this.currentColor.bgColor, this.currentColor.fgColor);
      this.shown = false;
      if ('callback' in this.currentColor)
        this.runCallback(this.currentColor);
    }
  }
  /**
   * Set the active colors through css variables
   */
  setActiveColors(bgColor, fgColor) {
    document.documentElement.style.setProperty('--toolbar-active-bg-color', bgColor);
    document.documentElement.style.setProperty('--toolbar-active-fg-color', fgColor);
  }
  /**
   * Handle click on currently selected color
   */
  handleCurrentColorClick() {
    this.shown = !this.shown;
  }
  /**
   * Called everytime the component renders to run some setup on child elements
   */
  componentDidRender() {
    this.setupChildren();
  }
  /**
   * Run some setup for the children items
   */
  setupChildren() {
    this.dropDownContainer
      .querySelector('slot')
      .assignedElements()
      .forEach((element) => {
      if (element.tagName == 'ZEA-MENU-COLOR') {
        this.colorElements.push(element);
        element.addEventListener('click', this.handleDropDownColorClick.bind(this));
      }
    });
    if (!this.currentColor) {
      if (this.userColorElement) {
        this.currentColor = this.userColorElement;
      }
      else {
        this.currentColor = this.colorElements[0];
      }
      this.setActiveColors(this.currentColor.bgColor, this.currentColor.fgColor);
    }
    this.currentColorContainer.appendChild(this.currentColor);
  }
  /**
   * Run the item's callback
   * @param {any} element The element whose callback to call
   */
  runCallback(element) {
    if (element.callback) {
      if (typeof element.callback == 'string') {
        eval(element.callback);
      }
      else {
        element.callback(element);
      }
    }
  }
  /**
   * Main render method for the component
   * @return {JSX} The generated markup
   */
  render() {
    return (h("div", { class: "zea-menu-colorpicker" },
      h("div", { onClick: this.handleCurrentColorClick.bind(this), class: "currentColor", ref: (el) => (this.currentColorContainer = el) }),
      h("div", { class: `colorDropdown ${this.shown ? 'shown' : ''}`, ref: (el) => (this.dropDownContainer = el) },
        h("slot", null),
        this.userColor && (h("div", { class: "user-color" },
          "My color:",
          ' ',
          h("zea-menu-color", { ref: (el) => {
              this.userColorElement = el;
            }, "bg-color": this.userColor, "fg-color": "white", onClick: this.handleDropDownColorClick.bind(this) }))))));
  }
  static get is() { return "zea-menu-colorpicker"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["zea-menu-colorpicker.css"]
  }; }
  static get styleUrls() { return {
    "$": ["zea-menu-colorpicker.css"]
  }; }
  static get properties() { return {
    "shown": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "shown",
      "reflect": false,
      "defaultValue": "false"
    },
    "userColor": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "user-color",
      "reflect": false,
      "defaultValue": "null"
    }
  }; }
}
