/* eslint-disable no-unused-vars */
/* eslint-disable require-jsdoc */
import { Component, h, Prop, State, Listen } from '@stencil/core';
import uxFactory from '../../assets/UxFactory.js';
import iro from '@jaames/iro';
/**
 * Main class for the component
 */
export class ZeaParamWidgetColor {
  constructor() {
    this.colorPickerHeight = 200;
    if (!globalThis.zeaEngine) {
      console.warn('`zeaEngine` missing from the `globalThis` object and this component requires it');
    }
  }
  /**
   * Listen to window resize event
   */
  handleWindowResize() {
    clearTimeout(this.resizeTimeout);
    this.resizeTimeout = setTimeout(() => this.resizeColorPicker(), 500);
  }
  /**
   * Resizes color picker
   */
  resizeColorPicker() {
    this.colorPicker.resize(this.container.offsetWidth, this.colorPickerHeight);
  }
  /**
   * Run when component loads
   */
  componentDidLoad() {
    this.setUpColorPicker();
    if (this.parameter) {
      this.parameter.on('valueChanged', () => {
        this.updateComponent();
      });
      this.updateComponent();
    }
    setTimeout(() => window.dispatchEvent(new Event('resize')), 1000);
  }
  /**
   * Called when the parameter value changes externally
   */
  updateComponent() {
    if (!this.parameterChange) {
      this.undoing = true;
      this.colorPicker.color.rgb = this.parameter.getValue().getAsRGBDict();
      this.undoing = false;
      this.sampleColor = this.colorPicker.color.hslString;
      this.setSampleTextColor();
    }
  }
  /**
   * Set the color of the text in the sample box
   */
  setSampleTextColor() {
    const l = 100 - this.colorPicker.color.hsl.l;
    this.sampleTextColor = `hsl(1, 0%, ${l}%)`;
  }
  /**
   * Setup the color picker and it's events
   */
  setUpColorPicker() {
    this.colorPicker = iro.ColorPicker(this.colorPickerContainer, {
      // Color picker options:
      // https://iro.js.org/guide.html
      width: this.container.offsetWidth,
      height: this.colorPickerHeight,
      anticlockwise: true,
      borderWidth: 0,
      borderColor: '#fff',
      sliderHeight: '10px',
      padding: 1,
      sliderMargin: 4,
      handleRadius: 4,
      layout: [
        {
          // hue slider
          component: iro.ui.Slider,
          options: {
            sliderType: 'hue',
          },
        },
        {
          // saturation slider
          component: iro.ui.Slider,
          options: {
            sliderType: 'saturation',
          },
        },
        {
          // regular value slider
          component: iro.ui.Slider,
          options: {},
        },
      ],
    });
    this.colorPicker.on('input:start', () => {
      this.handleUXChange(this.parameter.getValue());
    });
    this.colorPicker.on('input:end', () => {
      this.parameterChange = undefined;
    });
    this.colorPicker.on('color:change', () => {
      if (this.undoing)
        return;
      if (!globalThis.zeaEngine) {
        console.log('`zeaEngine` missing from `globalThis` object.');
        return;
      }
      const { Color } = globalThis.zeaEngine;
      const value = new Color();
      value.setFromRGBDict(this.colorPicker.color.rgb);
      this.sampleColor = this.colorPicker.color.hslString;
      this.setSampleTextColor();
      this.handleUXChange(value);
    });
  }
  /**
   * Handles the creation of the UX Change object and the UndoRedoManager
   *
   * @param {Parameter} value - Parameter object
   */
  handleUXChange(value) {
    if (!globalThis.zeaUx) {
      console.log('To add Undo/Redo functionalities just add `zeaUx` library to your `globalThis` object, because right now it is missing.');
      return;
    }
    const { UndoRedoManager, ParameterValueChange } = globalThis.zeaUx;
    const undoRedoManager = UndoRedoManager.getInstance();
    if (!this.parameterChange) {
      this.parameterChange = new ParameterValueChange(this.parameter, value);
      undoRedoManager.addChange(this.parameterChange);
    }
    else {
      this.parameterChange.update({ value });
    }
  }
  /**
   * Main ender method.
   * @return {JSX} The generated html
   */
  render() {
    return (h("div", { ref: (el) => (this.container = el), class: "zea-param-widget-color" },
      h("div", { style: {
          color: this.sampleTextColor,
          backgroundColor: this.sampleColor,
        }, class: "color-sample" }, this.sampleColor),
      h("div", { ref: (el) => (this.colorPickerContainer = el), class: "color-picker" })));
  }
  static get is() { return "zea-param-widget-color"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["zea-param-widget-color.css"]
  }; }
  static get styleUrls() { return {
    "$": ["zea-param-widget-color.css"]
  }; }
  static get properties() { return {
    "parameter": {
      "type": "any",
      "mutable": false,
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Parameter to be edited"
      },
      "attribute": "parameter",
      "reflect": false
    },
    "appData": {
      "type": "any",
      "mutable": false,
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The application data"
      },
      "attribute": "app-data",
      "reflect": false
    }
  }; }
  static get states() { return {
    "sampleColor": {}
  }; }
  static get listeners() { return [{
      "name": "resize",
      "method": "handleWindowResize",
      "target": "window",
      "capture": false,
      "passive": true
    }]; }
}
uxFactory.registerWidget('zea-param-widget-color', (p) => p.getDataType() === 'Color');
