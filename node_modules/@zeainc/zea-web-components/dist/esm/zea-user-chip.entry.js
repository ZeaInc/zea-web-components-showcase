import { r as registerInstance, c as createEvent, h } from './index-b00b7e23.js';

const zeaUserChipCss = ":host{z-index:100000000}:host,input,button,select,textarea{font-family:'Roboto', sans-serif}.zea-chip{color:var(--color-foreground-1);user-select:none}.zea-chip-avatar{border:2px solid var(--color-background-2);width:32px;height:32px;border-radius:18px;color:white;display:flex;align-items:center;justify-content:center;position:relative;font-size:13px}.active .zea-chip-avatar{box-shadow:0px 0px 1px 2px var(--color-primary-1)}.avatar-image{position:absolute;top:0;left:0;bottom:0;right:0;border-radius:18px;background-size:cover;background-position:center center}.empty-user-chip{display:none}.small .zea-chip-avatar{width:28px;height:28px;border-radius:36px;font-size:13px}.small .avatar-image{border-radius:36px}.large .zea-chip-avatar{width:60px;height:60px;border-radius:36px;font-size:18px}.large .avatar-image{border-radius:36px}zea-user-card{position:absolute;margin-top:3px}zea-user-card.align-right{margin-left:-256px}.tooltip{position:absolute;padding:4px 7px;border-radius:4px;font-size:12px;color:var(--color-foreground-1);background-color:var(--color-grey-3);z-index:100000000;white-space:nowrap;margin-left:18px;transform:translateX(-50%);display:none}.zea-chip:hover .tooltip{display:block}.tooltip.bleeded-right{right:0;transform:none}.tooltip.bleeded-left{left:0;margin-left:0;transform:none}@media only screen and (max-width: 667px){zea-user-card{position:fixed;width:100%;left:0}}@media only screen and (max-width: 667px), only screen and (max-height: 667px){.tooltip{display:none !important}}";

const ZeaUserChip = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.zeaUserClicked = createEvent(this, "zeaUserClicked", 7);
    /**
     * Whether the chip is for the current user session
     */
    this.isCurrentUser = false;
    /**
     * Whether the chip is currently active
     */
    this.isActive = false;
    /**
     * Whether avatar images should be shown or not
     */
    this.showImages = true;
    /**
     * The density of the chip (large|normal|small|tiny)
     */
    this.density = 'normal';
    /**
     * Whether the tooltip should be shown
     */
    this.showTooltip = true;
    /**
     * Whether to ever show the profile card
     */
    this.showProfileCard = true;
    /**
     * Whether the profile card is currently shown
     */
    this.profileCardShown = false;
    /**
     * Alignment of the profile card (right|left)
     */
    this.profileCardAlign = 'left';
    /**
     * Used as background color for the chip
     */
    this.randomColor = '#000000'.replace(/0/g, () => {
      // limit the random number range so that colors
      // are not too dark nor too bright
      // eslint-disable-next-line no-bitwise
      return (~~(5 + Math.random() * 7)).toString(16);
    });
  }
  /**
   * Listen to click events on the whole document
   * @param {any} e The event
   */
  handleClick(e) {
    if (e.composedPath().includes(this.chipElement)) {
      if (!e.composedPath().includes(this.profileCardElement)) {
        this.profileCardShown = !this.profileCardShown;
      }
    }
    else {
      this.profileCardShown = false;
    }
  }
  /**
   * Handle click on user chip: emit custom zeaUserClicked event
   */
  onChipClick(e) {
    this.zeaUserClicked.emit(this.userData);
    e.stopPropagation();
  }
  /**
   * On avatar over, fix tooltip position when its out of the screen
   */
  onAvatarOver() {
    this.fixTooltipPosition();
  }
  /**
   * On component render, fix tooltip position when its out of the screen
   */
  componentDidRender() {
    this.fixTooltipPosition();
  }
  /**
   * Fix the tooltip position if it goes out of screen
   */
  fixTooltipPosition() {
    if (!this.tooltipElement)
      return;
    const bbox = this.tooltipElement.getBoundingClientRect();
    if (bbox.x + bbox.width > window.innerWidth) {
      this.tooltipElement.classList.add('bleeded-right');
    }
    else {
      this.tooltipElement.classList.remove('bleeded-right');
    }
    if (bbox.x < 0) {
      this.tooltipElement.classList.add('bleeded-left');
    }
    else {
      this.tooltipElement.classList.remove('bleeded-left');
    }
  }
  /**
   * Main render function
   * @return {JSX} The generated html
   */
  render() {
    if (!this.userData)
      return h("span", { class: "empty-user-chip" });
    // Ensure that the zea-user-chip is compatible with a variety of userData values.
    const firstName = this.userData.firstName || this.userData.given_name;
    const lastName = this.userData.lastName || this.userData.family_name;
    const avatar = this.userData.avatar || this.userData.picture;
    let initials = '';
    let backgroundColor = this.userData.color;
    {
      let firstLetter = '';
      let secondLetter = '';
      if (firstName) {
        firstLetter = firstName.charAt(0);
      }
      if (lastName) {
        secondLetter = lastName.charAt(0);
      }
      else if (firstLetter) {
        // if no last name but it does have a firstName,
        // use the firstName's second letter
        secondLetter = firstName.charAt(1);
      }
      initials = String(firstLetter + secondLetter).toUpperCase();
    }
    if (!backgroundColor) {
      backgroundColor = this.randomColor;
      this.userData.color = this.randomColor;
    }
    const containerClass = { active: this.isActive, 'zea-chip': true };
    containerClass[this.density] = true;
    return (h("div", { ref: (el) => (this.chipElement = el), class: containerClass, onClick: this.onChipClick.bind(this) }, h("div", { class: "zea-chip-avatar", onMouseOver: this.onAvatarOver.bind(this), style: {
        backgroundColor: backgroundColor,
      } }, h("span", null, initials), this.showImages && !!avatar && (h("div", { class: "avatar-image", style: {
        backgroundImage: `url(${avatar})`,
      } }))), this.showTooltip && !this.profileCardShown && (h("div", { ref: (el) => (this.tooltipElement = el), class: "tooltip" }, `${firstName} ${lastName ? lastName : ''}`)), this.showProfileCard && (h("zea-user-card", { collapsible: true, isCurrentUser: this.isCurrentUser, ref: (el) => (this.profileCardElement = el), class: `align-${this.profileCardAlign}`, style: { display: this.profileCardShown ? 'block' : 'none' }, userData: this.userData }))));
  }
};
ZeaUserChip.style = zeaUserChipCss;

export { ZeaUserChip as zea_user_chip };
