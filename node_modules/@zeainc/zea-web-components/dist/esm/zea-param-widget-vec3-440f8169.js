import { r as registerInstance, h } from './index-b00b7e23.js';
import { u as uxFactory } from './UxFactory-aa8b881d.js';

const zeaParamWidgetVec3Css = ":host,input,button,select,textarea{font-family:'Roboto', sans-serif}.zea-param-widget-vec3{color:var(--color-foreground-1);background-color:var(--color-background-2);max-width:400px}.zea-param-widget-vec3 input{width:100%;box-sizing:border-box;margin-bottom:0.5em;color:var(--color-foreground-1);background-color:var(--color-background-3)}.zea-param-widget-vec3 input:last-child{margin-bottom:0}.user-edited{box-shadow:0 0 8px var(--color-success-1);margin:0px}.vector-input-wrap{display:flex;align-items:center;margin-bottom:0.5em}.vector-input-wrap label{font-size:0.7em;padding:0.3em 1em 0.3em 0.3em;opacity:0.5}input[type='number']{padding:0.3em;font-size:0.9em;border:1px solid var(--color-grey-3);text-align:right}";

const ZeaParamWidgetVec3 = class {
  /**
   * Class constructor
   */
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.onInput = this.onInput.bind(this);
    this.onBlur = this.onBlur.bind(this);
    if (!globalThis.zeaEngine) {
      console.warn('`zeaEngine` missing from the `globalThis` object and this component requires it');
    }
  }
  /**
   * Re-init input when parameter changes
   */
  parameterChangeHandler() {
    this.setUpInputs();
  }
  /**
   * Run when component loads
   */
  componentDidLoad() {
    if (this.parameter) {
      this.setUpInputs();
      this.updateComponent();
    }
  }
  /**
   * Set the inputs up
   */
  setUpInputs() {
    this.parameter.on('valueChanged', () => {
      this.updateComponent();
    });
  }
  /**
   * Value change handler
   */
  updateComponent() {
    if (!this.parameterChange) {
      const vec3 = this.parameter.getValue();
      this.xField.value = `${this.round(vec3.x)}`;
      this.yField.value = `${this.round(vec3.y)}`;
      this.zField.value = `${this.round(vec3.z)}`;
    }
  }
  /**
   * Input handler
   */
  onInput() {
    if (!globalThis.zeaEngine) {
      console.log('`zeaEngine` missing from `globalThis` object.');
      return;
    }
    const { Vec3 } = globalThis.zeaEngine;
    const value = new Vec3(this.xField.valueAsNumber, this.yField.valueAsNumber, this.zField.valueAsNumber);
    this.handleUXChange(value);
  }
  /**
   * Change handler
   */
  onBlur() {
    this.parameterChange = undefined;
  }
  /**
   * Handles the creation of the UX Change object and the UndoRedoManager
   *
   * @param {Parameter} value - Parameter object
   */
  handleUXChange(value) {
    if (!globalThis.zeaUx) {
      console.log('To add Undo/Redo functionalities just add `zeaUx` library to your `globalThis` object, because right now it is missing.');
      return;
    }
    const { UndoRedoManager, ParameterValueChange } = globalThis.zeaUx;
    const undoRedoManager = UndoRedoManager.getInstance();
    if (!this.parameterChange) {
      this.parameterChange = new ParameterValueChange(this.parameter, value);
      undoRedoManager.addChange(this.parameterChange);
    }
    else {
      this.parameterChange.update({ value });
    }
  }
  /**
   * Round number
   * @param {number} value Number to be rounded
   * @param {number} decimals Number of decimal places
   * @return {number} Rounded number
   */
  round(value, decimals = 6) {
    return Number(Math.round(Number(value + 'e' + decimals)) + 'e-' + decimals);
  }
  /**
   * Render method.
   * @return {JSX} The generated html
   */
  render() {
    return (h("div", { class: "zea-param-widget-vec3" }, h("div", { class: "vector-input-wrap" }, h("label", null, "X"), h("input", { onInput: this.onInput, onBlur: this.onBlur, ref: (el) => (this.xField = el), id: this.parameter.getName(), type: "number", pattern: "-?[0-9]*(.[0-9]+)?", tabindex: "0", value: this.xValue })), h("div", { class: "vector-input-wrap" }, h("label", null, "Y"), h("input", { onInput: this.onInput, onBlur: this.onBlur, ref: (el) => (this.yField = el), id: this.parameter.getName(), type: "number", pattern: "-?[0-9]*(.[0-9]+)?", tabindex: "0", value: this.yValue })), h("div", { class: "vector-input-wrap" }, h("label", null, "Z"), h("input", { onInput: this.onInput, onBlur: this.onBlur, ref: (el) => (this.zField = el), id: this.parameter.getName(), type: "number", pattern: "-?[0-9]*(.[0-9]+)?", tabindex: "0", value: this.zValue }))));
  }
  static get watchers() { return {
    "parameter": ["parameterChangeHandler"]
  }; }
};
uxFactory.registerWidget('zea-param-widget-vec3', (p) => p.getDataType() === 'Vec3');
ZeaParamWidgetVec3.style = zeaParamWidgetVec3Css;

export { ZeaParamWidgetVec3 as Z };
