import { r as registerInstance, h } from './index-b00b7e23.js';

const zeaInputCss = ".zea-input{color:var(--color-foreground-1)}.input-label{font-size:11px;color:var(--color-grey-3)}.input-wrap{display:block;}input[type='text']{box-sizing:border-box;width:100%;color:var(--color-foreground-2);background-color:transparent;border:none;outline:none;font-size:1em;border-bottom:1px solid var(--color-grey-3)}input[type='text'].invalid{border-bottom:1px solid var(--color-warning-2)}.invalid-message{color:var(--color-warning-2);padding:0.3em 0;font-size:12px}.photo-input{display:flex;overflow:hidden}.photo-input input{position:absolute;left:-100000px}:host,input,button,select,textarea{font-family:'Roboto', sans-serif}.photo-input .input-label{display:block}.photo-thumb{flex-shrink:0;display:block;width:54px;height:54px;border-radius:30px;margin-right:10px;background-color:var(--color-secondary-1);display:flex;align-items:center;justify-content:center;font-size:12px;position:relative}.photo-copy{font-size:12px;color:var(--color-foreground-2)}#photo-preview{position:absolute;width:100%;height:100%;background-size:cover;border-radius:30px}.color-input{display:flex;overflow:hidden}.color-input .input-label{display:block}.color-thumb{flex-shrink:0;display:block;width:54px;height:54px;border-radius:30px;margin-right:10px;display:flex;align-items:center;justify-content:center;font-size:12px}.color-copy{font-size:12px;color:var(--color-foreground-2)}.color-popup{padding:7px;position:absolute;grid-template-columns:1fr 1fr 1fr 1fr;margin-top:-70px;margin-left:43px;border-radius:10px;background-color:var(--color-background-2);display:none;z-index:1000}.color-popup.top-left{margin-top:110px;margin-left:-54px}.color-popup.shown{display:grid}.color-option{padding:8px}.color-option.active{padding:0}.color-option.active .color-sample{width:32px;height:32px;border-radius:20px}.color-sample{width:16px;height:16px;border-radius:10px}.choosen-color{width:32px;height:32px;border-radius:20px}";

const ZeaInput = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /**
     */
    this.name = 'zea-input';
    /**
     */
    this.type = 'text';
    /**
     */
    this.label = 'Enter text...';
    /**
     */
    this.invalidMessage = 'Not valid';
    /**
     */
    this.required = false;
    /**
     */
    this.isValid = true;
    /**
     */
    this.autoValidate = false;
    /**
     */
    this.invalidMessageShown = false;
    /**
     */
    this.showLabel = false;
    /**
     */
    this.photoBase64 = '';
    /**
     */
    this.colorPopupShown = false;
    /**
     */
    this.colorPopupAlign = 'bottom-right';
    /**
     */
    this.colorOptions = [
      '#F34235',
      '#E81D62',
      '#000000',
      '#9B26AF',
      '#6639B6',
      '#3E50B4',
      '#2095F2',
      '#02A8F3',
      '#00BBD3',
      '#009587',
      '#4BAE4F',
      '#8AC249',
      '#CCDB38',
      '#FEEA3A',
      '#FEC006',
      '#FE9700',
      '#FE5621',
      '#785447',
      '#9D9D9D',
      '#5F7C8A',
    ];
  }
  /**
   * Listen to click events on the whole document
   * @param {any} e The event
   */
  handleClick(e) {
    if (!e.composedPath().includes(this.colorPopup) &&
      !e.composedPath().includes(this.selectedColorContainer)) {
      this.colorPopupShown = false;
    }
  }
  /**
   */
  checkValue() {
    if (!this.inputElement)
      return;
    if (this.type == 'photo') {
      this.value = this.photoBase64;
    }
    else if (this.type == 'color') {
      this.value = this.selectedColor;
    }
    else {
      this.value = this.inputElement.value;
      this.value.replace(/(^\s+|\s+$)/, ''); // trim
    }
    if (this.required) {
      if (!this.value) {
        this.invalidMessage = 'Field is required';
        this.isValid = false;
        if (this.autoValidate)
          this.invalidMessageShown = true;
      }
      else {
        this.isValid = true;
        this.invalidMessageShown = false;
      }
    }
  }
  /**
   */
  onKeyUp(e) {
    this.checkValue();
    e.stopPropagation();
  }
  /**
   */
  onKeyDown(e) {
    e.stopPropagation();
  }
  /**
   */
  onColorClick(e) {
    this.selectColor(e.currentTarget.dataset.color);
  }
  /**
   */
  selectColor(color) {
    const colorElement = this.inputWrapElement.querySelector(`.color-option[data-color="${color}"]`);
    if (!colorElement)
      return;
    this.selectedColor = colorElement.dataset.color;
    if (this.currentColorElement)
      this.currentColorElement.classList.remove('active');
    colorElement.classList.add('active');
    this.currentColorElement = colorElement;
    this.value = this.selectedColor;
  }
  /**
   */
  onPhotoChange(e) {
    const file = e.currentTarget.files[0];
    const reader = new FileReader();
    reader.addEventListener('load', () => {
      this.photoBase64 = `${reader.result}`;
      this.value = this.photoBase64;
      this.checkValue();
    }, false);
    if (file) {
      reader.readAsDataURL(file);
    }
  }
  /**
   */
  componentDidRender() {
    // this.checkValue()
  }
  /**
   */
  componentWillLoad() {
    if (this.type == 'color' && !this.selectedColor && !this.value) {
      this.selectedColor = this.colorOptions[Math.floor(Math.random() * this.colorOptions.length)];
      this.value = this.selectedColor;
    }
    else if (this.type == 'color' && this.value) {
      this.selectedColor = this.value;
    }
    if (this.type == 'photo' && this.value) {
      this.photoBase64 = this.value; // TODO: check it's actually base64
    }
  }
  /**
   */
  componentDidLoad() {
    this.selectColor(this.selectedColor);
  }
  /**
   */
  render() {
    const inputTypes = {
      text: [
        this.showLabel && h("label", { class: "input-label" }, this.label),
        h("input", { ref: (el) => (this.inputElement = el), placeholder: this.showLabel ? '' : this.label, type: "text", value: this.value, onKeyDown: this.onKeyDown.bind(this), onKeyUp: this.onKeyUp.bind(this), class: {
            invalid: (this.autoValidate || this.invalidMessageShown) && !this.isValid,
          } }),
      ],
      photo: (h("div", { class: "photo-input" }, h("div", { class: "photo-thumb", onClick: () => {
          this.inputElement.dispatchEvent(new MouseEvent('click'));
        } }, h("zea-icon", { name: "camera-outline", size: 30 }), h("div", { id: "photo-preview", style: { backgroundImage: `url(${this.value})` } })), h("div", { class: "photo-copy" }, h("label", { class: "input-label" }, this.label), "Your photo lets people recognize you while working together."), h("input", { ref: (el) => (this.inputElement = el), type: "file", onChange: this.onPhotoChange.bind(this), class: {
          invalid: (this.autoValidate || this.invalidMessageShown) &&
            !this.isValid,
        } }))),
      color: (h("div", { class: "color-input" }, h("div", { class: "color-thumb" }, h("div", { ref: (el) => (this.selectedColorContainer = el), class: "choosen-color", style: { backgroundColor: this.selectedColor }, onClick: () => {
          this.colorPopupShown = !this.colorPopupShown;
        } }), h("div", { ref: (el) => (this.colorPopup = el), class: `color-popup ${this.colorPopupShown ? 'shown' : ''} ${this.colorPopupAlign}` }, this.colorOptions.map((colorOption) => (h("div", { class: "color-option", "data-color": colorOption, onMouseDown: this.onColorClick.bind(this), onMouseUp: () => {
          this.colorPopupShown = false;
        } }, h("div", { class: "color-sample", style: { backgroundColor: colorOption } })))))), this.showLabel && (h("div", { class: "color-copy" }, h("label", { class: "input-label" }, this.label), "Your color helps you stand out from other people.")))),
    };
    return (h("div", { class: "input-wrap", ref: (el) => (this.inputWrapElement = el) }, inputTypes[this.type], !this.isValid && this.invalidMessageShown && (h("div", { class: "invalid-message" }, this.invalidMessage))));
  }
};
ZeaInput.style = zeaInputCss;

export { ZeaInput as zea_input };
