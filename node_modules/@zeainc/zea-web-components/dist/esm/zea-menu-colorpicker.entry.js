import { r as registerInstance, h } from './index-b00b7e23.js';

const zeaMenuColorpickerCss = ":host,input,button,select,textarea{font-family:'Roboto', sans-serif}.currentColor{margin:10px;width:24px;height:24px}.colorDropdown{display:none}.colorDropdown.shown{display:grid;grid-gap:10px;padding:10px;grid-template-columns:1fr 1fr 1fr;position:absolute;margin-top:-42px;margin-left:49px;border-radius:15px;background-color:var(--color-background-2)}.user-color{font-size:11px;grid-column-start:1;grid-column-end:4;display:flex;justify-content:center;border-radius:8px;width:100%;box-sizing:border-box;align-items:center}.user-color zea-menu-color{margin-left:5px}";

const ZeaMenuColorpicker = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.colorElements = [];
    this.shown = false;
    this.userColor = null;
  }
  /**
   * Handler for click events on the whole window
   * @param {any} e the event
   */
  handleDropDownColorClick(e) {
    if (e.target == this.currentColor)
      return;
    if (e.target.tagName == 'ZEA-MENU-COLOR') {
      if (this.currentColorSample) {
        this.currentColorSample.classList.remove('active');
      }
      this.currentColorSample = e.target;
      this.currentColorSample.classList.add('active');
      if (this.currentColor)
        this.currentColor.remove();
      this.currentColor = this.currentColorSample.cloneNode(true);
      this.currentColorContainer.appendChild(this.currentColor);
      this.setActiveColors(this.currentColor.bgColor, this.currentColor.fgColor);
      this.shown = false;
      if ('callback' in this.currentColor)
        this.runCallback(this.currentColor);
    }
  }
  /**
   * Set the active colors through css variables
   */
  setActiveColors(bgColor, fgColor) {
    document.documentElement.style.setProperty('--toolbar-active-bg-color', bgColor);
    document.documentElement.style.setProperty('--toolbar-active-fg-color', fgColor);
  }
  /**
   * Handle click on currently selected color
   */
  handleCurrentColorClick() {
    this.shown = !this.shown;
  }
  /**
   * Called everytime the component renders to run some setup on child elements
   */
  componentDidRender() {
    this.setupChildren();
  }
  /**
   * Run some setup for the children items
   */
  setupChildren() {
    this.dropDownContainer
      .querySelector('slot')
      .assignedElements()
      .forEach((element) => {
      if (element.tagName == 'ZEA-MENU-COLOR') {
        this.colorElements.push(element);
        element.addEventListener('click', this.handleDropDownColorClick.bind(this));
      }
    });
    if (!this.currentColor) {
      if (this.userColorElement) {
        this.currentColor = this.userColorElement;
      }
      else {
        this.currentColor = this.colorElements[0];
      }
      this.setActiveColors(this.currentColor.bgColor, this.currentColor.fgColor);
    }
    this.currentColorContainer.appendChild(this.currentColor);
  }
  /**
   * Run the item's callback
   * @param {any} element The element whose callback to call
   */
  runCallback(element) {
    if (element.callback) {
      if (typeof element.callback == 'string') {
        eval(element.callback);
      }
      else {
        element.callback(element);
      }
    }
  }
  /**
   * Main render method for the component
   * @return {JSX} The generated markup
   */
  render() {
    return (h("div", { class: "zea-menu-colorpicker" }, h("div", { onClick: this.handleCurrentColorClick.bind(this), class: "currentColor", ref: (el) => (this.currentColorContainer = el) }), h("div", { class: `colorDropdown ${this.shown ? 'shown' : ''}`, ref: (el) => (this.dropDownContainer = el) }, h("slot", null), this.userColor && (h("div", { class: "user-color" }, "My color:", ' ', h("zea-menu-color", { ref: (el) => {
        this.userColorElement = el;
      }, "bg-color": this.userColor, "fg-color": "white", onClick: this.handleDropDownColorClick.bind(this) }))))));
  }
};
ZeaMenuColorpicker.style = zeaMenuColorpickerCss;

export { ZeaMenuColorpicker as zea_menu_colorpicker };
