'use strict';

const index = require('./index-f5b25f1f.js');
const UxFactory = require('./UxFactory-c83e3e9b.js');

const zeaParamWidgetBooleanCss = ":host,input,button,select,textarea{font-family:'Roboto', sans-serif}.zea-param-widget-boolean{color:var(--color-foreground-1);background-color:var(--color-background-2)}.user-edited{box-shadow:0 0 8px var(--color-success-1);margin:0px}";

const ZeaParamWidgetBoolean = class {
  /**
   * Class constructor
   */
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    /**
     * Whether the checkbox should be checked
     */
    this.checked = false;
    this.onChange = this.onChange.bind(this);
    if (!globalThis.zeaEngine) {
      console.warn('`zeaEngine` missing from the `globalThis` object and this component requires it');
    }
  }
  /**
   * Run when component loads
   */
  componentDidLoad() {
    if (this.parameter) {
      this.checked = this.parameter.getValue();
      this.parameter.on('valueChanged', () => {
        this.checked = this.parameter.getValue();
      });
    }
  }
  /**
   * Run when input changes
   */
  onChange() {
    if (!globalThis.zeaEngine) {
      console.log('`zeaEngine` missing from `globalThis` object.');
      return;
    }
    this.handleUXChange(this.checkboxInput.checked);
  }
  /**
   * Handles the creation of the UX Change object and the UndoRedoManager
   *
   * @param {Parameter} value - Parameter object
   */
  handleUXChange(value) {
    if (!globalThis.zeaUx) {
      this.parameter.setValue(value);
      console.log('To add Undo/Redo functionalities just add `zeaUx` library to your `globalThis` object, because right now it is missing.');
      return;
    }
    const { UndoRedoManager, ParameterValueChange } = globalThis.zeaUx;
    const undoRedoManager = UndoRedoManager.getInstance();
    const change = new ParameterValueChange(this.parameter, value);
    undoRedoManager.addChange(change);
  }
  /**
   * Render method.
   *
   * @return {JSX} The generated html
   */
  render() {
    return (index.h("div", { class: "zea-param-widget-boolean" }, index.h("input", { onChange: this.onChange, ref: (el) => (this.checkboxInput = el), type: "checkbox", name: this.parameter.getName(), checked: this.checked })));
  }
};
UxFactory.uxFactory.registerWidget('zea-param-widget-boolean', (p) => p.getDataType() === 'Boolean');
ZeaParamWidgetBoolean.style = zeaParamWidgetBooleanCss;

exports.ZeaParamWidgetBoolean = ZeaParamWidgetBoolean;
