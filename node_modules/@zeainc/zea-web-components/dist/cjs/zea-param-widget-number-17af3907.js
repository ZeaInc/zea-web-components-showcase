'use strict';

const index = require('./index-f5b25f1f.js');
const UxFactory = require('./UxFactory-c83e3e9b.js');

const zeaParamWidgetNumberCss = ":host,input,button,select,textarea{font-family:'Roboto', sans-serif}.zea-param-widget-number{color:var(--color-foreground-1);background-color:var(--color-background-2);max-width:400px}.user-edited{box-shadow:0 0 8px var(--color-success-1);margin:0px}.zea-param-widget-number input{width:100%;box-sizing:border-box;color:var(--color-foreground-1);background-color:var(--color-background-3)}input[type='number']{padding:0.3em;font-size:0.9em;border:1px solid var(--color-grey-3);text-align:right}";

const ZeaParamWidgetNumber = class {
  /**
   * Class constructor
   */
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.onChange = this.onChange.bind(this);
    if (!globalThis.zeaEngine) {
      console.warn('`zeaEngine` missing from the `globalThis` object and this component requires it');
    }
  }
  /**
   * Re-init input when parameter changes
   */
  parameterChangeHandler() {
    this.setUpInput();
  }
  /**
   * Run when component loads
   */
  componentDidLoad() {
    if (this.parameter) {
      this.setUpInput();
    }
  }
  /**
   * Set up the input
   */
  setUpInput() {
    this.range = this.parameter.getRange();
    this.step = this.parameter.getStep();
    this.updateComponent();
    this.parameter.on('valueChanged', () => {
      this.updateComponent();
    });
  }
  /**
   * Sets the value of the input
   */
  updateComponent() {
    if (this.range) {
      this.value =
        ((this.parameter.getValue() - this.range[0]) /
          (this.range[1] - this.range[0])) *
          200;
    }
    else {
      this.value = this.parameter.getValue();
    }
  }
  /**
   * Run when input changes
   */
  onChange() {
    let value = this.round(this.inputField.valueAsNumber);
    if (this.range) {
      // Renmap from the 0..200 integer to the floating point
      // range specified in the parameter.
      value = this.range[0] + (value / 200) * (this.range[1] - this.range[0]);
      value = this.clamp(value, this.range[0], this.range[1]);
    }
    this.handleUXChange(value);
  }
  /**
   * Handles the creation of the UX Change object and the UndoRedoManager
   *
   * @param {Parameter} value - Parameter object
   */
  handleUXChange(value) {
    if (!globalThis.zeaUx) {
      this.parameter.setValue(value);
      console.log('To add Undo/Redo functionalities just add `zeaUx` library to your `globalThis` object, because right now it is missing.');
      return;
    }
    const { UndoRedoManager, ParameterValueChange } = globalThis.zeaUx;
    const undoRedoManager = UndoRedoManager.getInstance();
    const change = new ParameterValueChange(this.parameter, value);
    undoRedoManager.addChange(change);
  }
  /**
   * Round number
   * @param {number} value Number to be rounded
   * @param {number} decimals Number of decimal places
   * @return {number} Rounded number
   */
  round(value, decimals = 6) {
    return Number(Math.round(Number(value + 'e' + decimals)) + 'e-' + decimals);
  }
  /**
   * Clamp number
   * @param {number} num Number to be rounded
   * @param {number} a Number of decimal places
   * @param {number} b Number of decimal places
   * @return {number} clamped number
   */
  clamp(num, a, b) {
    return Math.max(Math.min(num, Math.max(a, b)), Math.min(a, b));
  }
  /**
   * Render method.
   * @return {JSX} The generated html
   */
  render() {
    if (this.range) {
      return (index.h("div", { class: "zea-param-widget-number" }, index.h("input", { onChange: this.onChange, ref: (el) => (this.inputField = el), class: "mdl-slider mdl-js-slider", type: "range", min: "0", max: "200", step: this.step ? this.step : 1, id: this.parameter.getName(), value: this.value, tabindex: "0" })));
    }
    return (index.h("div", { class: "zea-param-widget-number" }, index.h("input", { onChange: this.onChange, ref: (el) => (this.inputField = el), type: "number", pattern: "-?[0-9]*(.[0-9]+)?", id: this.parameter.getName(), value: this.value, tabindex: "0" })));
  }
  static get watchers() { return {
    "parameter": ["parameterChangeHandler"]
  }; }
};
UxFactory.uxFactory.registerWidget('zea-param-widget-number', (p) => p.getDataType() === 'Number');
ZeaParamWidgetNumber.style = zeaParamWidgetNumberCss;

exports.ZeaParamWidgetNumber = ZeaParamWidgetNumber;
