'use strict';

const index = require('./index-f5b25f1f.js');
const UxFactory = require('./UxFactory-c83e3e9b.js');

const zeaParamWidgetStringCss = ":host,input,button,select,textarea{font-family:'Roboto', sans-serif}.zea-param-widget-string{color:var(--color-foreground-1);background-color:var(--color-background-2)}input{width:100%;box-sizing:border-box;padding:0.3em;font-size:0.9em;border:1px solid var(--color-grey-3);color:var(--color-foreground-1);background-color:var(--color-background-3)}.user-edited{box-shadow:0 0 8px var(--color-success-1);margin:0px}";

const ZeaParamWidgetString = class {
  /**
   * Class constructor
   */
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.onInput = this.onInput.bind(this);
    this.onChange = this.onChange.bind(this);
    if (!globalThis.zeaEngine) {
      console.warn('`zeaEngine` missing from the `globalThis` object and this component requires it');
    }
  }
  /**
   * Run when component loads
   */
  componentDidLoad() {
    if (this.parameter) {
      this.setUpInputs();
      this.updateComponent();
    }
  }
  /**
   * Set the inputs up
   */
  setUpInputs() {
    this.parameter.on('valueChanged', () => {
      this.updateComponent();
    });
  }
  /**
   * Value change handler
   */
  updateComponent() {
    if (!this.parameterChange) {
      this.txtField.value = this.parameter.getValue();
    }
  }
  /**
   * Input handler
   */
  onInput() {
    const value = this.txtField.value;
    this.handleUXChange(value);
  }
  /**
   * Change handler
   */
  onChange() {
    this.onInput();
    this.parameterChange = undefined;
  }
  /**
   * Handles the creation of the UX Change object and the UndoRedoManager
   *
   * @param {Parameter} value - Parameter object
   */
  handleUXChange(value) {
    if (!globalThis.zeaUx) {
      console.log('To add Undo/Redo functionalities just add `zeaUx` library to your `globalThis` object, because right now it is missing.');
      return;
    }
    const { UndoRedoManager, ParameterValueChange } = globalThis.zeaUx;
    const undoRedoManager = UndoRedoManager.getInstance();
    if (!this.parameterChange) {
      this.parameterChange = new ParameterValueChange(this.parameter, value);
      undoRedoManager.addChange(this.parameterChange);
    }
    else {
      this.parameterChange.update({ value });
    }
  }
  /**
   * Render method.
   * @return {JSX} The generated html
   */
  render() {
    return (index.h("div", { class: "zea-param-widget-string" }, index.h("input", { onInput: this.onInput, onChange: this.onChange, onKeyUp: (e) => {
        e.stopPropagation();
      }, onKeyDown: (e) => {
        e.stopPropagation();
      }, ref: (el) => (this.txtField = el), id: this.parameter.getName(), type: "text", tabindex: "0" })));
  }
};
UxFactory.uxFactory.registerWidget('zea-param-widget-string', (p) => p.getDataType() === 'String');
ZeaParamWidgetString.style = zeaParamWidgetStringCss;

exports.ZeaParamWidgetString = ZeaParamWidgetString;
