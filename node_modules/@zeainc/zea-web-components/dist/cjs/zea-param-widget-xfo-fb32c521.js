'use strict';

const index = require('./index-f5b25f1f.js');
const UxFactory = require('./UxFactory-c83e3e9b.js');

const zeaParamWidgetXfoCss = ":host,input,button,select,textarea{font-family:'Roboto', sans-serif}.zea-param-widget-xfo{color:var(--color-foreground-1);background-color:var(--color-background-2);max-width:400px}.zea-param-widget-xfo input{width:100%;box-sizing:border-box;color:var(--color-foreground-1);background-color:var(--color-background-3)}.user-edited{box-shadow:0 0 8px var(--color-success-1);margin:0px}.input-wrap{display:flex;align-items:center;margin-bottom:0.5em}.input-wrap label{font-size:0.7em;padding:0.3em 1em 0.3em 0.3em;opacity:0.5;width:1.5em;text-align:center}input[type='number']{padding:0.3em;font-size:0.9em;border:1px solid var(--color-grey-3);text-align:right}fieldset{border:1px solid var(--color-grey-3)}legend{color:var(--color-foreground-2);font-size:0.8em}";

const ZeaParamWidgetXfo = class {
  /**
   * Class constructor
   */
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.settingValue = false;
    this.onInput = this.onInput.bind(this);
    this.onBlur = this.onBlur.bind(this);
    if (!globalThis.zeaEngine) {
      console.warn('`zeaEngine` missing from the `globalThis` object and this component requires it');
    }
  }
  /**
   * Run when component loads
   */
  componentDidLoad() {
    if (this.parameter) {
      this.setUpInputs();
      this.updateComponent();
    }
  }
  /**
   * Value change handler
   */
  updateComponent() {
    if (!this.settingValue) {
      const xfo = this.parameter.getValue();
      this.trxField.value = `${this.round(xfo.tr.x)}`;
      this.tryField.value = `${this.round(xfo.tr.y)}`;
      this.trzField.value = `${this.round(xfo.tr.z)}`;
      this.orxField.value = `${this.round(xfo.ori.x)}`;
      this.oryField.value = `${this.round(xfo.ori.y)}`;
      this.orzField.value = `${this.round(xfo.ori.z)}`;
      this.orwField.value = `${this.round(xfo.ori.w)}`;
      this.scxField.value = `${this.round(xfo.sc.x)}`;
      this.scyField.value = `${this.round(xfo.sc.y)}`;
      this.sczField.value = `${this.round(xfo.sc.z)}`;
    }
  }
  /**
   * Set the inputs up
   */
  setUpInputs() {
    this.parameter.on('valueChanged', () => {
      this.updateComponent();
    });
  }
  /**
   * Input handler
   */
  onInput() {
    this.settingValue = true;
    if (!globalThis.zeaEngine) {
      console.log('`zeaEngine` missing from `globalThis` object.');
      return;
    }
    const { Xfo } = globalThis.zeaEngine;
    const value = new Xfo();
    value.tr.set(this.trxField.valueAsNumber, this.tryField.valueAsNumber, this.trzField.valueAsNumber);
    value.ori.set(this.orxField.valueAsNumber, this.oryField.valueAsNumber, this.orzField.valueAsNumber, this.orwField.valueAsNumber); /* value order is xyzw*/
    value.ori.normalizeInPlace();
    value.sc.set(this.scxField.valueAsNumber, this.scyField.valueAsNumber, this.sczField.valueAsNumber);
    this.handleUXChange(value);
  }
  /**
   * Change handler
   */
  onBlur() {
    this.settingValue = false;
    this.parameterChange = undefined;
  }
  /**
   * Handles the creation of the UX Change object and the UndoRedoManager
   *
   * @param {Parameter} value - Parameter object
   */
  handleUXChange(value) {
    if (!globalThis.zeaUx) {
      console.log('To add Undo/Redo functionalities just add `zeaUx` library to your `globalThis` object, because right now it is missing.');
      return;
    }
    const { UndoRedoManager, ParameterValueChange } = globalThis.zeaUx;
    const undoRedoManager = UndoRedoManager.getInstance();
    if (!this.parameterChange) {
      this.parameterChange = new ParameterValueChange(this.parameter, value);
      undoRedoManager.addChange(this.parameterChange);
    }
    else {
      this.parameterChange.update({ value });
    }
  }
  /**
   * Round number
   * @param {number} value the value to be rounded
   * @param {number} decimals decimal places to keep
   * @return {number} the rouunded value
   */
  round(value, decimals = 6) {
    if (Math.abs(value) < Number('1e-6'))
      return 0;
    return Number(Math.round(Number(value + 'e' + decimals)) + 'e-' + decimals);
  }
  /**
   * Render method.
   * @return {JSX} The generated html
   */
  render() {
    return (index.h("div", { class: "zea-param-widget-xfo" }, index.h("fieldset", null, index.h("legend", null, "Translation"), index.h("div", { class: "input-wrap" }, index.h("label", null, "X"), index.h("input", { onInput: this.onInput, onBlur: this.onBlur, ref: (el) => (this.trxField = el), id: this.parameter.getName(), type: "number", pattern: "-?[0-9]*(.[0-9]+)?", tabindex: "0" })), index.h("div", { class: "input-wrap" }, index.h("label", null, "Y"), index.h("input", { onInput: this.onInput, onBlur: this.onBlur, ref: (el) => (this.tryField = el), id: this.parameter.getName(), type: "number", pattern: "-?[0-9]*(.[0-9]+)?", tabindex: "0" })), index.h("div", { class: "input-wrap" }, index.h("label", null, "Z"), index.h("input", { onInput: this.onInput, onBlur: this.onBlur, ref: (el) => (this.trzField = el), id: this.parameter.getName(), type: "number", pattern: "-?[0-9]*(.[0-9]+)?", tabindex: "0" }))), index.h("fieldset", null, index.h("legend", null, "Rotation"), index.h("div", { class: "input-wrap" }, index.h("label", null, "X"), index.h("input", { onInput: this.onInput, onBlur: this.onBlur, ref: (el) => (this.orxField = el), id: this.parameter.getName(), type: "number", pattern: "-?[0-9]*(.[0-9]+)?", tabindex: "0" })), index.h("div", { class: "input-wrap" }, index.h("label", null, "Y"), index.h("input", { onInput: this.onInput, onBlur: this.onBlur, ref: (el) => (this.oryField = el), id: this.parameter.getName(), type: "number", pattern: "-?[0-9]*(.[0-9]+)?", tabindex: "0" })), index.h("div", { class: "input-wrap" }, index.h("label", null, "Z"), index.h("input", { onInput: this.onInput, onBlur: this.onBlur, ref: (el) => (this.orzField = el), id: this.parameter.getName(), type: "number", pattern: "-?[0-9]*(.[0-9]+)?", tabindex: "0" })), index.h("div", { class: "input-wrap" }, index.h("label", null, "W"), index.h("input", { onInput: this.onInput, onBlur: this.onBlur, ref: (el) => (this.orwField = el), id: this.parameter.getName(), type: "number", pattern: "-?[0-9]*(.[0-9]+)?", tabindex: "0" }))), index.h("fieldset", null, index.h("legend", null, "Scale"), index.h("div", { class: "input-wrap" }, index.h("label", null, "X"), index.h("input", { onInput: this.onInput, onBlur: this.onBlur, ref: (el) => (this.scxField = el), id: this.parameter.getName(), type: "number", pattern: "-?[0-9]*(.[0-9]+)?", tabindex: "0" })), index.h("div", { class: "input-wrap" }, index.h("label", null, "Y"), index.h("input", { onInput: this.onInput, onBlur: this.onBlur, ref: (el) => (this.scyField = el), id: this.parameter.getName(), type: "number", pattern: "-?[0-9]*(.[0-9]+)?", tabindex: "0" })), index.h("div", { class: "input-wrap" }, index.h("label", null, "Z"), index.h("input", { onInput: this.onInput, onBlur: this.onBlur, ref: (el) => (this.sczField = el), id: this.parameter.getName(), type: "number", pattern: "-?[0-9]*(.[0-9]+)?", tabindex: "0" })))));
  }
};
UxFactory.uxFactory.registerWidget('zea-param-widget-xfo', (p) => p.getDataType() === 'Xfo');
ZeaParamWidgetXfo.style = zeaParamWidgetXfoCss;

exports.ZeaParamWidgetXfo = ZeaParamWidgetXfo;
