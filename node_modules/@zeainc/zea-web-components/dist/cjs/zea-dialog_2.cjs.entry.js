'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-f5b25f1f.js');

const zeaDialogCss = "@import url('https://unpkg.com/tachyons@4/css/tachyons.min.css');:host{position:relative;z-index:10000000}:host,input,button,select,textarea{font-family:'Roboto', sans-serif}.zea-dialog{color:var(--color-foreground-1);display:none;justify-content:center;align-items:center;position:fixed;top:0;left:0;bottom:0;right:0;max-width:100vw;max-height:100vh;font-size:14px;pointer-events:none}.zea-dialog.shown{display:flex}.backdrop{background-color:var(--color-shadow);position:absolute;top:0;left:0;bottom:0;right:0;pointer-events:auto}.scroll-pane-container{max-height:100%;height:100%}.zea-dialog-container{box-sizing:border-box;position:relative;display:flex;flex-direction:column;background-color:var(--color-background-1);box-shadow:2px 6px 10px 5px var(--color-shadow);min-height:fit-content;min-width:fit-content;pointer-events:auto;max-height:100%;max-width:100%}.zea-dialog-title ::slotted([slot='title']){margin:0.5em 0}.zea-dialog-title{color:var(--color-foreground-1);padding:2em 2em 0;display:flex;align-items:center}.zea-dialog-title zea-icon{display:none}.with-padding .zea-dialog-title{padding:20px 20px 0 20px}.zea-dialog-body{flex-grow:1;height:100%;box-sizing:border-box}.with-padding .zea-dialog-body{padding:20px}.zea-dialog-body ::slotted([slot='body']){height:100%;box-sizing:border-box}.zea-dialog-footer{text-align:right}.with-padding .zea-dialog-footer{padding:0 20px 20px}@media only screen and (max-width: 667px), only screen and (max-height: 667px){:host{position:relative;z-index:1000000000000}.zea-dialog-container.full-screen-mobile{height:100% !important;width:100% !important;position:fixed;top:0;left:0}.zea-dialog-title{color:var(--color-foreground-1);background-color:var(--color-grey-2);padding:0.5em 1em}.zea-dialog-title zea-icon{margin-right:1em;display:inline-block}.with-padding .zea-dialog-title{padding:0.5em 1em}.with-padding .zea-dialog-body{padding:20px;height:calc(100% - 3em)}}";

const ZeaDialog = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.dialogClose = index.createEvent(this, "dialogClose", 7);
    this.shown = false;
    this.width = 'auto';
    this.allowClose = true;
    this.showBackdrop = true;
    this.addPadding = true;
    this.showTitle = true;
    this.fullScreenMobile = true;
  }
  /**
   */
  async prompt() {
    this.shown = true;
  }
  /**
   */
  closeDialog() {
    if (this.allowClose) {
      this.shown = false;
      this.dialogClose.emit(this.hostElement);
    }
  }
  /**
   */
  resetSize() {
    if (!this.dialogContainer)
      return;
    if (this.width) {
      this.dialogContainer.style.width = this.width;
    }
    else {
      this.dialogContainer.style.width = `fit-content`;
    }
    this.dialogContainer.style.height = `fit-content`;
    if (this.dialogContainer.offsetHeight) {
      this.dialogContainer.style.height = `${this.dialogContainer.offsetHeight}px`;
    }
    if (this.dialogContainer.offsetWidth) {
      this.dialogContainer.style.width = `${this.dialogContainer.offsetWidth}px`;
    }
  }
  /**
   */
  componentDidRender() {
    this.resetSize();
  }
  /**
   */
  componentWillLoad() {
    window.addEventListener('resize', () => {
      this.resetSize();
    });
  }
  /**
   */
  setupContainer(el) {
    if (this.dialogContainer)
      return;
    this.dialogContainer = el;
    this.dialogContainer.addEventListener('dialogResize', () => {
      this.resetSize();
    });
  }
  /**
   * Main render function
   * @return {JSX} the generated html
   */
  render() {
    return (index.h("div", { class: {
        'zea-dialog': true,
        shown: this.shown,
        'with-padding': this.addPadding,
      } }, this.showBackdrop && (index.h("div", { class: "backdrop", onClick: this.closeDialog.bind(this) })), index.h("div", { class: {
        'zea-dialog-container': true,
        'full-screen-mobile': this.fullScreenMobile,
      }, ref: (el) => this.setupContainer(el) }, this.showTitle && (index.h("div", { class: "zea-dialog-title" }, this.allowClose && (index.h("zea-icon", { name: "arrow-back", onClick: this.closeDialog.bind(this) })), index.h("slot", { name: "title" }))), index.h("div", { class: "zea-dialog-body" }, index.h("slot", { name: "body" })), index.h("div", { class: "zea-dialog-footer" }, index.h("slot", { name: "footer" })))));
  }
  get hostElement() { return index.getElement(this); }
};
ZeaDialog.style = zeaDialogCss;

const zeaProgressBarCss = ":host,input,button,select,textarea{font-family:'Roboto', sans-serif}.zea-progress-bar{position:absolute;bottom:0;left:0;width:100%;box-sizing:border-box;overflow:hidden}.progress{overflow:hidden;max-width:100%;transition:width 0.4s}.indeterminate .progress{position:absolute;animation-name:indeterminate_progress_continuous;animation-duration:1.4s;animation-iteration-count:infinite;animation-timing-function:linear}.indeterminate.pulsating .progress{position:absolute;width:20% !important;animation-name:indeterminate_progress_pulsating;animation-duration:1.4s;animation-iteration-count:infinite;animation-timing-function:linear}@keyframes indeterminate_progress_continuous{0%{width:0;left:0}50%{width:100%;left:0}100%{width:0%;left:100%}}@keyframes indeterminate_progress_pulsating{0%{width:0;left:0}25%{width:30%;left:0}50%{width:50%;left:25%}75%{width:30%;left:75%}100%{width:0%;left:100%}}";

const ZeaProgressBar = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    /**
     * The bar type (determinate | indeterminate)
     */
    this.type = 'determinate';
    /**
     * The progress (width) percentage for the bar
     */
    this.percent = 50;
    /**
     * The size (height) of the progress bar
     */
    this.size = 3;
    /**
     * The color for the bar
     */
    this.color = 'var(--color-primary-1)';
    /**
     * The color for the background track
     */
    this.backgroundColor = 'var(--color-primary-3)';
    /**
     * The animation type for the indeterminate bar ( continuous | pulsating)
     */
    this.indeterminateAnimation = 'continuous';
  }
  /**
   * Main render method for the component
   * @return {JSX} The generated markup
   */
  render() {
    return (index.h("div", { class: `zea-progress-bar ${this.type} ${this.indeterminateAnimation}`, style: {
        backgroundColor: this.backgroundColor,
        height: this.size + 'px',
      } }, index.h("div", { class: "progress", style: {
        width: this.percent + '%',
        height: this.size + 'px',
        backgroundColor: this.color,
      } })));
  }
};
ZeaProgressBar.style = zeaProgressBarCss;

exports.zea_dialog = ZeaDialog;
exports.zea_progress_bar = ZeaProgressBar;
