'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-f5b25f1f.js');

const zeaMenuItemCss = "*{cursor:default;user-select:none}:host,input,button,select,textarea{font-family:'Roboto', sans-serif}.zea-menu-item{position:relative}.outer-wrap{display:flex;align-items:center;color:var(--color-foreground-1);position:relative}.toolbar .outer-wrap{background-color:transparent;border-radius:30px;margin:5px}.pressed .outer-wrap{background-color:var(--color-grey-3)}.active .outer-wrap{background-color:var(--color-grey-3)}.standalone:hover .outer-wrap{background-color:var(--color-grey-3)}.zea-menu-item:hover{background-color:var(--color-grey-3)}.zea-menu-item.toolbar:hover{background-color:transparent}.toolbar.pressed .outer-wrap{background-color:var(--color-background-2)}.toolbar.active .outer-wrap{background-color:var(--toolbar-active-bg-color, var(--color-grey-3));color:var(--toolbar-active-fg-color, var(--color-foreground-1))}.inner-wrap{display:flex;align-items:center;font-size:12px;padding:0 10px;min-height:40px;white-space:nowrap;flex-grow:1}zea-switch{margin-left:0.5em;pointer-events:none}zea-checkbox{margin-right:0.5em;pointer-events:none}::slotted(zea-icon){margin-right:5px;font-size:10px;pointer-events:none}.toolbar .inner-wrap{padding:5px;min-height:auto}.toolbar ::slotted(zea-icon){margin-right:0}.hotkey{display:block;opacity:0.75;font-size:0.8em;padding-left:10px;pointer-events:none}.keyboard-key{border:1px solid var(--color-grey-3);padding:2px;border-radius:5px;font-size:0.8em;text-align:center;min-width:10px;display:inline-block;background-color:var(--color-background-1);text-transform:uppercase;margin:0 2px}";

const ZeaMenuItem = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.zeaMenuItemClick = index.createEvent(this, "zeaMenuItemClick", 7);
    this.zeaMenuItemPressed = index.createEvent(this, "zeaMenuItemPressed", 7);
    this.switch = false;
    this.active = false;
    this.hasCheckbox = false;
    this.hasRadio = false;
    this.checked = false;
    this.shown = false;
    this.allowHover = false;
    this.hotkey = '';
    this.type = '';
    this.hasSubitems = false;
    this.isPushButton = false;
  }
  /**
   * Listen to the event emitted when any item is clicked
   * @param {any} e the event data
   */
  windowClickHandler(e) {
    if (e.composedPath().includes(this.rootMenu)) {
      this.active = false;
      e.detail.active = true;
      /* if (this.isDescendant(this.subitemsElement, e.detail)) {
      this.active = true
    } */
      if (!e.detail.hasSubitems && this.type != 'toolbar') {
        this.active = false;
      }
    }
  }
  /**
   * Listen to click (mouse up) events on the whole window
   * and make sure the item is deactivated if the click was
   * on an external element
   * @param {any} ev the event
   */
  handleWindowMouseup(ev) {
    if (this.isPushButton ||
      (!this.isDescendant(this.rootMenu, ev.target) && this.type != 'toolbar')) {
      this.active = false;
    }
  }
  /**
   * Listen to touch end events on the whole window
   * and make sure the item is deactivated if the click was
   * on an external element
   * @param {any} ev the event
   */
  handleWindowTouchend(ev) {
    if (this.isPushButton ||
      (!this.isDescendant(this.rootMenu, ev.target) && this.type != 'toolbar')) {
      this.active = false;
    }
  }
  /**
   * Check if an element is child of another
   * @param {any} parent the parent
   * @param {any} child the child
   * @return {any} whether or not is parent
   */
  isDescendant(parent, child) {
    let node = child.parentNode;
    while (node != null) {
      if (node == parent) {
        return true;
      }
      node = node.parentNode;
    }
    return false;
  }
  /**
   * Called everytime the component renders
   */
  componentDidRender() {
    // this.setupChildren()
  }
  /**
   * Called everytime the component renders
   */
  watchHandler() {
    this.setupChildren();
  }
  /**
   * Run some setup for the children items
   */
  setupChildren() {
    this.container
      .querySelector('slot')
      .assignedElements()
      .forEach((element) => {
      if (element.tagName == 'ZEA-MENU-SUBITEMS') {
        this.hasSubitems = true;
        this.subitemsElement = element;
        this.subitemsElement.rootMenu = this.rootMenu;
        this.subitemsElement.parentItem = this.hostElement;
        this.subitemsElement.type = this.hostElement.parentElement['type'];
        this.outerWrap.appendChild(this.subitemsElement);
        this.container.classList.add('has-subitems');
        if (this.hostElement.parentElement.tagName == 'ZEA-MENU') {
          this.subitemsElement.belongsToRoot = true;
        }
      }
    });
  }
  /**
   * Handle click/tap
   * @param {any} e The event
   */
  handleItemClick(e) {
    this.zeaMenuItemClick.emit(this.hostElement);
    /* const zeaSwitch = this.container.querySelector('ZEA-SWITCH')
    if (zeaSwitch && (!e.target || e.target.tagName != 'ZEA-SWITCH'))
      zeaSwitch.checked = !zeaSwitch.checked */
    /* if (
      this.checkboxElement &&
      (!e.target || e.target.tagName != 'ZEA-CHECKBOX')
    )
      this.checked = !this.checked */
    this.active = true;
    this.runCallback(e);
  }
  /**
   * Handle Mouse down
   * @param {any} e The event
   */
  handleItemMouseDown() {
    this.container.classList.add('pressed');
    this.zeaMenuItemPressed.emit(this.hostElement);
    this.checked = !this.checked;
    if (this.isPushButton) {
      this.active = true;
    }
  }
  /**
   * Handle mouse up
   * @param {any} e The event
   */
  handleItemMouseUp(e) {
    this.container.classList.remove('pressed');
    this.handleItemClick(e);
    if (!this.hasSubitems && this.type != 'toolbar') {
      this.active = false;
    }
  }
  /**
   * Run the item's callback
   * @param {any} payLoad The data to pass to the callback
   */
  runCallback(payLoad) {
    if (this.callback) {
      if (typeof this.callback == 'string') {
        eval(this.callback);
      }
      else {
        this.callback(payLoad);
      }
    }
  }
  /**
   * Listen for keyboard shortcuts
   * @param {any} e the event
   */
  keydownHandler(e) {
    if (e.target instanceof HTMLInputElement)
      return;
    const keys = [];
    if (e.shiftKey)
      keys.push('shift');
    if (e.altKey)
      keys.push('alt');
    if (e.metaKey)
      keys.push('ctrl');
    if (e.ctrlKey)
      keys.push('ctrl');
    if (e.key != 'Alt' &&
      e.key != 'Control' &&
      e.key != 'Ctrl' &&
      e.key != 'Shift') {
      keys.push(e.key);
    }
    const comboString = keys.join('+').toLowerCase();
    if (comboString == this.hotkey.toLowerCase()) {
      this.handleItemClick(new MouseEvent('click'));
    }
    e.preventDefault();
  }
  /**
   * Generate markup for keyboard shortcut
   * @param {any} action the action
   * @return {array} the html elements
   */
  keyComboAsHtml() {
    const hotkeyParts = this.hotkey.split('+');
    const elements = [];
    hotkeyParts.forEach((part) => {
      part = part.toLowerCase();
      if (part == 'ctrl') {
        elements.push(index.h("span", { class: "keyboard-key" }, "Ctrl"));
        elements.push('+');
      }
      else if (part == 'alt') {
        elements.push(index.h("span", { class: "keyboard-key" }, "Alt"));
        elements.push('+');
      }
      else if (part == 'shift') {
        elements.push(index.h("span", { class: "keyboard-key" }, "Shift"));
        elements.push('+');
      }
      else {
        elements.push(index.h("span", { class: "keyboard-key" }, part));
      }
    });
    return elements;
  }
  /**
   * Render function
   * @return {JSX}
   */
  render() {
    return (index.h("div", { ref: (el) => (this.container = el), class: `zea-menu-item ${this.type} ${this.active ? 'active' : ''} ${this.allowHover ? 'allow-hover' : ''}` }, index.h("div", { class: "outer-wrap", ref: (el) => (this.outerWrap = el) }, index.h("div", { class: "inner-wrap", onMouseDown: this.handleItemMouseDown.bind(this), onMouseUp: this.handleItemMouseUp.bind(this), onTouchStart: this.handleItemMouseDown.bind(this), onTouchEnd: this.handleItemMouseUp.bind(this) }, this.hasCheckbox ? (index.h("zea-checkbox", { isRadio: this.hasRadio, checked: this.checked, ref: (el) => (this.checkboxElement = el) })) : null, index.h("slot", null), this.switch ? (index.h("zea-switch", { checked: this.checked })) : null, this.hotkey ? (index.h("span", { class: "hotkey" }, this.keyComboAsHtml())) : null))));
  }
  get hostElement() { return index.getElement(this); }
  static get watchers() { return {
    "rootMenu": ["watchHandler"]
  }; }
};
ZeaMenuItem.style = zeaMenuItemCss;

exports.zea_menu_item = ZeaMenuItem;
