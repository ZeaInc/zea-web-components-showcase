'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-f5b25f1f.js');

const zeaUserChipSetCss = ":host,input,button,select,textarea{font-family:'Roboto', sans-serif}.zea-chip-set{color:var(--color-foreground-1);display:flex;position:relative}zea-user-chip{margin-left:-8px;width:36px;height:36px;border:1px solid transparent;border-radius:19px}.overflow-thumb{border:2px solid var(--color-background-3);background-color:var(--color-background-3);width:36px;height:36px;color:var(--color-foreground-2);display:flex;align-items:center;justify-content:center;position:relative;font-size:13px;margin-left:-8px;border-radius:19px;box-sizing:border-box;user-select:none}.overflow-tooltip{position:absolute;top:35px;padding:4px 7px;border-radius:4px;font-size:12px;color:var(--color-foreground-1);background-color:var(--color-grey-3);z-index:10000;white-space:nowrap;display:none}.overflow-thumb:hover .overflow-tooltip{display:block}.overflow-list{max-height:calc(100vh - 60px);width:min-content;overflow-y:auto;background-color:var(--color-background-2);display:none}.overflow-list.shown{display:block;position:absolute}.overflow-list zea-user-card{display:block;}.overflow-entry{display:flex;align-items:stretch}.overflow-entry:hover{background-color:var(--color-grey-2)}.overflow-entry.shown:hover{background-color:transparent}.overflow-entry-collapser{margin:7px 3px 0 5px;width:30px;height:30px;justify-content:center;align-items:center;display:flex;background-color:transparent;border-radius:18px}.overflow-entry.shown .overflow-entry-collapser:hover{background-color:var(--color-grey-2)}";

const ZeaUserChipSet = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    /**
     * Whether avatar images should be shown or not
     */
    this.showImages = true;
    /**
     * The initial z-index for chip overlapping
     */
    this.initialZIndex = 1000;
    /**
     * Number of chips to show before overflow happens
     */
    this.overflowLimit = 5;
    /**
     * Number of chips to show before overflow happens
     */
    this.overflowShown = false;
    /**
     * Object containing entries in the overflow
     */
    this.shownOverflowEntry = null;
  }
  /**
   * Watch for changes in the session property
   */
  sessionChanged() {
    this.setupSession();
  }
  /**
   * Called when the component first loads
   */
  componentWillLoad() {
    setTimeout(() => {
      this.setupSession();
    }, 500);
  }
  /**
   * Set up the sesion subscriptions
   */
  setupSession() {
    if (this.session && 'sub' in this.session) {
      // Initialize the data array with any users already in the meeting.
      const userDatas = [];
      for (let u in this.session.users) {
        if (this.session.users.hasOwnProperty(u)) {
          userDatas.push(this.session.users[u]);
        }
      }
      this.userDatas = userDatas;
      // Maintaint the order which users join.
      // New users should be on the left.
      this.session.sub('user-joined', (userData) => {
        if (!this.userDatas.find((sessionUserData) => sessionUserData.id == userData.id)) {
          this.userDatas = [userData, ...this.userDatas];
        }
      });
      this.session.sub('user-left', (userData) => {
        const index = this.userDatas.findIndex((sessionUserData) => sessionUserData.id == userData.id);
        if (index == -1) {
          console.warn('User id not in session:', userData.id);
          return;
        }
        const userDatas = [...this.userDatas];
        // Remove the user from our array.
        userDatas.splice(index, 1);
        this.userDatas = userDatas;
      });
      this.session.sub('userChanged', (newUserData) => {
        this.session.users[newUserData.id] = newUserData;
        const userDatas = [];
        for (let u in this.session.users) {
          if (this.session.users.hasOwnProperty(u)) {
            userDatas.push(this.session.users[u]);
          }
        }
        this.userDatas = userDatas;
      });
    }
    else {
      this.userDatas = [];
    }
  }
  /**
   * Activate the current item
   * @param {any} e The event
   */
  onChipClick(e) {
    e.stopPropagation();
  }
  /**
   * Render method.
   * @return {JSX} The generated html
   */
  render() {
    if (!this.userDatas)
      return;
    const shownChips = this.userDatas.slice(0, this.overflowLimit);
    const overflownChips = this.userDatas.slice(this.overflowLimit);
    // let currentZIndex = this.initialZIndex
    return (index.h("div", { class: "zea-chip-set" }, shownChips &&
      shownChips.map((userData) => {
        return (index.h("zea-user-chip", { showImages: this.showImages, key: userData.id, userData: userData,
          // style={{ zIndex: `${--currentZIndex}` }}
          onClick: this.onChipClick.bind(this) }));
      }), overflownChips.length > 0 && (index.h("div", { class: "overflow" }, index.h("div", { class: "overflow-thumb", onClick: (e) => {
        this.overflowShown = !this.overflowShown;
        e.stopPropagation();
      } }, [
      `+${this.userDatas.length - this.overflowLimit}`,
      !this.overflowShown && (index.h("div", { class: "overflow-tooltip" }, "Show All")),
    ]), index.h("div", { class: { 'overflow-list': true, shown: this.overflowShown } }, overflownChips.map((userData) => {
      return (index.h("div", { key: userData.id, class: {
          'overflow-entry': true,
          shown: this.shownOverflowEntry == userData.id,
        }, onClick: (e) => {
          if (this.shownOverflowEntry != userData.id) {
            this.shownOverflowEntry = userData.id;
            e.currentTarget.scrollIntoView();
            e.preventDefault();
            e.stopPropagation();
          }
        } }, index.h("div", { class: "overflow-entry-collapser", onClick: (e) => {
          this.shownOverflowEntry =
            this.shownOverflowEntry == userData.id
              ? null
              : userData.id;
          e.currentTarget.scrollIntoView();
          e.preventDefault();
          e.stopPropagation();
        } }, index.h("zea-icon", { name: this.shownOverflowEntry == userData.id
          ? 'chevron-up-outline'
          : 'chevron-down-outline', size: 14 })), index.h("zea-user-card", { userData: userData, collapsible: false, density: this.shownOverflowEntry == userData.id
          ? 'normal'
          : 'small' })));
    }))))));
  }
  static get watchers() { return {
    "session": ["sessionChanged"]
  }; }
};
ZeaUserChipSet.style = zeaUserChipSetCss;

exports.zea_user_chip_set = ZeaUserChipSet;
