'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-f5b25f1f.js');

const zeaInputTextCss = ":host{display:inline-block;width:100%;box-sizing:border-box}:host(.hidden){display:none}:host,input,button,select,textarea{font-family:'Roboto', sans-serif}.zea-input{color:var(--color-foreground-1)}.input-label{color:var(--color-foreground-3);position:relative;transition:all 0.2s linear;pointer-events:none}.empty .input-label{top:18px;font-size:13px}.not-empty .input-label,.focused .input-label{top:0;font-size:11px}.focused .input-label{color:var(--color-secondary-1)}.input-wrap{display:block;position:relative}input[type='text']{box-sizing:border-box;width:100%;color:var(--color-foreground-1);background-color:transparent;border:none;outline:none;font-size:1em;font-size:13px}.invalid-message{color:var(--color-warning-1);padding:0.3em 0;font-size:12px}.underliner{text-align:center;height:1px;background-color:var(--color-grey-3);overflow:hidden;display:flex;justify-content:center}.underliner .expander{height:1px;background-color:var(--color-secondary-1);overflow:hidden;display:inline-block;width:0;transition:width 0.2s linear}.focused .underliner .expander{width:100%}.invalid .underliner .expander{background-color:var(--color-warning-1);width:100%}.disabled .underliner{background-color:transparent;border-bottom:1px dotted var(--color-grey-3)}.hidden{display:none}";

const ZeaInputText = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    /**
     */
    this.name = 'zea-input';
    /**
     */
    this.label = 'Enter text...';
    /**
     */
    this.invalidMessage = 'Not valid';
    /**
     */
    this.required = false;
    /**
     */
    this.disabled = false;
    /**
     */
    this.isValid = true;
    /**
     */
    this.autoValidate = false;
    /**
     */
    this.invalidMessageShown = false;
    /**
     */
    this.showLabel = true;
    /**
     */
    this.hidden = false;
  }
  /**
   */
  checkValue() {
    if (!this.inputElement)
      return;
    this.value = this.inputElement.value;
    this.value.replace(/(^\s+|\s+$)/, ''); // trim
    if (this.required) {
      if (!this.value) {
        this.invalidMessage = 'Field is required';
        this.isValid = false;
        if (this.autoValidate)
          this.invalidMessageShown = true;
      }
      else {
        this.isValid = true;
        this.invalidMessageShown = false;
      }
    }
  }
  /**
   */
  onKeyUp(e) {
    this.checkValue();
    e.stopPropagation();
  }
  /**
   */
  onKeyDown(e) {
    e.stopPropagation();
  }
  /**
   */
  onBlur() {
    this.inputWrapElement.classList.remove('focused');
  }
  /**
   */
  onFocus() {
    this.inputWrapElement.classList.add('focused');
  }
  /**
   */
  componentDidRender() {
    this.checkValue();
  }
  /**
   * Main render function
   * @return {JSX} The generated html
   */
  render() {
    return (index.h(index.Host, { class: `${this.hidden ? 'hidden' : ''}` }, index.h("div", { class: `input-wrap ${this.value ? 'not-empty' : 'empty'} ${!this.invalidMessageShown ? 'valid' : 'invalid'} ${this.disabled ? 'disabled' : ''} ${this.hidden ? 'hidden' : ''}`, ref: (el) => (this.inputWrapElement = el) }, this.showLabel && index.h("label", { class: "input-label" }, this.label), index.h("input", { ref: (el) => (this.inputElement = el),
      // placeholder={this.showLabel ? '' : this.label}
      type: "text", value: this.value, onKeyDown: this.onKeyDown.bind(this), onKeyUp: this.onKeyUp.bind(this), onBlur: this.onBlur.bind(this), onFocus: this.onFocus.bind(this), disabled: this.disabled, class: {
        invalid: (this.autoValidate || this.invalidMessageShown) &&
          !this.isValid,
      } }), index.h("div", { class: "underliner" }, index.h("div", { class: "expander" })), !this.isValid && this.invalidMessageShown && (index.h("div", { class: "invalid-message" }, this.invalidMessage)))));
  }
};
ZeaInputText.style = zeaInputTextCss;

exports.zea_input_text = ZeaInputText;
