/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
export namespace Components {
    interface ZeaButton {
        /**
          * Whether the button should be disabled (true) or not (false)
         */
        "color": boolean;
        /**
          * Whether the button should be disabled (true) or not (false)
         */
        "density": string;
        /**
          * Whether the button should be disabled (true) or not (false)
         */
        "disabled": boolean;
        /**
          * Text/html to be displayed inside the button
         */
        "htmlContent": string;
        /**
          * Style variant for the button
         */
        "variant": string;
    }
    interface ZeaCheckbox {
        /**
          * /**    Whether the checkbox is checked
         */
        "checked": boolean;
        /**
          * /**    Whether the checkbox is disabled
         */
        "disabled": boolean;
        /**
          * Whether the checkbox should be presented as a radio button
         */
        "isRadio": boolean;
        /**
          * /**    Text/html to be displayed inside the button
         */
        "name": string;
    }
    interface ZeaCopyLink {
        "link": string;
        "tooltipIsVisible": boolean;
        "tooltipText": string;
    }
    interface ZeaDialog {
        "addPadding": boolean;
        "allowClose": boolean;
        "fullScreenMobile": boolean;
        "prompt": () => Promise<void>;
        "showBackdrop": boolean;
        "showTitle": boolean;
        "shown": boolean;
        "width": string;
    }
    interface ZeaDropdownMenu {
        /**
          * The application data TODO: pass actionRegistry only instead of whole appData
         */
        "appData": any;
    }
    interface ZeaFabButton {
        /**
          * /**    Whether the button should be disabled (true) or not (false)
         */
        "disabled": false;
    }
    interface ZeaForm {
        "formValue": any;
        "isValid": boolean;
        "submitCallback": any;
        "submitText": string;
        "validate": boolean;
    }
    interface ZeaIcon {
        /**
          * The icon name within the chosen library
         */
        "name": string;
        /**
          * The icon size in pixels
         */
        "size": number;
        /**
          * The library to load the icon from
         */
        "type": string;
    }
    interface ZeaImagesGallery {
        /**
          * Number of columns
         */
        "columns": number;
        /**
          * Number of featured images
         */
        "featured": number;
        /**
          * Folder from which to take the files to display.
         */
        "folder": { children: any[]; };
    }
    interface ZeaInput {
        "autoValidate": boolean;
        "colorOptions": string[];
        "colorPopupAlign": string;
        "colorPopupShown": boolean;
        "invalidMessage": string;
        "invalidMessageShown": boolean;
        "isValid": boolean;
        "label": string;
        "name": string;
        "photoBase64": string;
        "required": boolean;
        "selectedColor": any;
        "showLabel": boolean;
        "type": string;
        "value": any;
    }
    interface ZeaInputColor {
        "colorOptions": string[];
        "colorPopupAlign": string;
        "colorPopupShown": boolean;
        "invalidMessage": string;
        "invalidMessageShown": boolean;
        "isValid": boolean;
        "label": string;
        "name": string;
        "required": boolean;
        "selectedColor": any;
        "showLabel": boolean;
        "value": any;
    }
    interface ZeaInputDate {
        /**
          * A test prop.
         */
        "test": string;
    }
    interface ZeaInputPhoto {
        /**
          * A test prop.
         */
        "test": string;
    }
    interface ZeaInputSearch {
        "placeholder": string;
    }
    interface ZeaInputSelect {
        "autoValidate": boolean;
        "invalidMessage": string;
        "invalidMessageShown": boolean;
        "isValid": boolean;
        "label": string;
        "name": string;
        "optionsShown": boolean;
        "required": boolean;
        "selectCallback": any;
        "showLabel": boolean;
        "value": any;
    }
    interface ZeaInputSelectItem {
        "value": any;
    }
    interface ZeaInputText {
        "autoValidate": boolean;
        "disabled": boolean;
        "hidden": boolean;
        "invalidMessage": string;
        "invalidMessageShown": boolean;
        "isValid": boolean;
        "label": string;
        "name": string;
        "required": boolean;
        "showLabel": boolean;
        "value": any;
    }
    interface ZeaLayout {
        "cellASize": number;
        "cellCSize": number;
        "cellCount": number;
        "orientation": string;
        "resizeCellA": boolean;
        "resizeCellC": boolean;
        "resizeInterval": number;
        "showBorders": boolean;
    }
    interface ZeaMarkdownViewer {
        /**
          * MD text to be converted
         */
        "mdText": string;
    }
    interface ZeaMenu {
        "anchorIcon": string;
        "anchorIconSize": number;
        "contextualAlign": string;
        "leftOffset": string;
        "orientation": string;
        "showAnchor": boolean;
        "shown": boolean;
        "topOffset": string;
        "type": string;
    }
    interface ZeaMenuColor {
        /**
          * The color assigned to this item
         */
        "bgColor": string;
        /**
          * The color of the foreground (icon) for the tool
         */
        "fgColor": string;
    }
    interface ZeaMenuColorpicker {
        "shown": boolean;
        "userColor": string;
    }
    interface ZeaMenuItem {
        "active": boolean;
        "allowHover": boolean;
        "callback": any;
        "checked": boolean;
        "hasCheckbox": boolean;
        "hasRadio": boolean;
        "hasSubitems": boolean;
        "hotkey": string;
        "isPushButton": boolean;
        "rootMenu": HTMLElement;
        "shown": boolean;
        "switch": boolean;
        "type": string;
    }
    interface ZeaMenuSeparator {
        "class": string;
        "orientation": string;
    }
    interface ZeaMenuSubitems {
        /**
          * The item this subitems belongs to
         */
        "parentItem": any;
        /**
          * Whether the children should have checkboxes and behave as a radio button
         */
        "radioSelect": boolean;
        /**
          * The root menu this item belongs to
         */
        "rootMenu": HTMLElement;
        /**
          * Whether it is/should be shown
         */
        "shown": boolean;
        /**
          * Menu type
         */
        "type": string;
    }
    interface ZeaNavigationDrawer {
        "shown": boolean;
    }
    interface ZeaPanelProgressBar {
        "progressBar": any;
    }
    interface ZeaParamWidgetBbox {
        /**
          * Object that hosts undoRedo instance, parameter class and parameter change class. These last two so we can reconstruct the component dynamically.
         */
        "appData": object;
        /**
          * Parameter being parsed
         */
        "parameter": any;
    }
    interface ZeaParamWidgetBoolean {
        /**
          * The application data
         */
        "appData": any;
        /**
          * Whether the checkbox should be checked
         */
        "checked": boolean;
        /**
          * Parameter to be edited
         */
        "parameter": any;
    }
    interface ZeaParamWidgetCode {
        /**
          * The application data
         */
        "appData": any;
        /**
          * Parameter to be edited
         */
        "parameter": any;
    }
    interface ZeaParamWidgetColor {
        /**
          * The application data
         */
        "appData": any;
        /**
          * Parameter to be edited
         */
        "parameter": any;
    }
    interface ZeaParamWidgetMaterialColor {
        /**
          * The application data
         */
        "appData": any;
        /**
          * Parameter to be edited
         */
        "parameter": any;
    }
    interface ZeaParamWidgetNumber {
        /**
          * The application data
         */
        "appData": any;
        /**
          * Html input type
         */
        "inputType": string;
        /**
          * Parameter to be edited
         */
        "parameter": any;
        /**
          * The value of the number
         */
        "value": any;
    }
    interface ZeaParamWidgetString {
        /**
          * The application data
         */
        "appData": any;
        /**
          * Parameter to be edited
         */
        "parameter": any;
    }
    interface ZeaParamWidgetVec2 {
        /**
          * The application data
         */
        "appData": any;
        /**
          * Parameter to be edited
         */
        "parameter": any;
    }
    interface ZeaParamWidgetVec3 {
        /**
          * The application data
         */
        "appData": any;
        /**
          * Parameter to be edited
         */
        "parameter": any;
    }
    interface ZeaParamWidgetVec4 {
        /**
          * The application data
         */
        "appData": any;
        /**
          * Parameter to be edited
         */
        "parameter": any;
    }
    interface ZeaParamWidgetXfo {
        /**
          * The application data
         */
        "appData": any;
        /**
          * Parameter to be edited
         */
        "parameter": any;
    }
    interface ZeaParameterContainer {
        /**
          * The application data
         */
        "appData": any;
        /**
          * The parameter owner.
         */
        "parameterOwner": any;
    }
    interface ZeaPopupMenu {
        /**
          * Anchor element
         */
        "anchorElement": HTMLElement;
        "leftOffset": string;
        /**
          * Whether the menu should be shown
         */
        "shown": boolean;
        "topOffset": string;
    }
    interface ZeaPopupMenuItem {
        /**
          * Click Handler
         */
        "clickHandler": CallableFunction;
        /**
          * Material icon name for item end
         */
        "endIcon": string;
        /**
          * Material icon name for item start
         */
        "startIcon": string;
    }
    interface ZeaProgressBar {
        /**
          * The color for the background track
         */
        "backgroundColor": any;
        /**
          * The color for the bar
         */
        "color": any;
        /**
          * The animation type for the indeterminate bar ( continuous | pulsating)
         */
        "indeterminateAnimation": any;
        /**
          * The progress (width) percentage for the bar
         */
        "percent": any;
        /**
          * The size (height) of the progress bar
         */
        "size": any;
        /**
          * The bar type (determinate | indeterminate)
         */
        "type": string;
    }
    interface ZeaQrCode {
        /**
          * The content to code into the QR
         */
        "content": string;
        /**
          * The content to code into the QR
         */
        "scale": number;
    }
    interface ZeaScrollPane {
        "refreshScrollbar": () => Promise<void>;
    }
    interface ZeaSwitch {
        /**
          * Whether the switch is checked
         */
        "checked": boolean;
        /**
          * Whether the switch is disabled
         */
        "disabled": boolean;
        /**
          * Text/html to be displayed inside the button
         */
        "name": string;
        /**
          * State label to show next to the switch
         */
        "stateLabel": string;
    }
    interface ZeaTabs {
        "density": string;
        "orientation": string;
    }
    interface ZeaToolbar {
        /**
          * Array of tools
         */
        "tools": any;
    }
    interface ZeaToolbarColorpicker {
        /**
          * Array of tools
         */
        "data": any;
        /**
          * Whether the color dropdown should be shown
         */
        "displayChildren": boolean;
    }
    interface ZeaToolbarTool {
        /**
          * The tool data
         */
        "data": any;
        /**
          * Whether the tool is currently active
         */
        "isActive": boolean;
    }
    interface ZeaToolbarToolset {
        /**
          * Array of tools
         */
        "data": any;
    }
    interface ZeaTreeItemElement {
        "appData": any;
        "isExpanded": boolean;
        "isHighlighted": boolean;
        "isRoot": boolean;
        "isSelected": boolean;
        "isTreeItem": boolean;
        "isVisible": boolean;
        "label": string;
        "treeItem": any;
    }
    interface ZeaTreeView {
        "appData": any;
        "rootItem": any;
    }
    interface ZeaUserCard {
        /**
          * Whether additional data is currently shown
         */
        "additionalDataShown": boolean;
        /**
          * Whether to show the collpase control for additional data
         */
        "collapsible": boolean;
        /**
          * Density and size of elements
         */
        "density": string;
        /**
          * Whether the card is for the current user session
         */
        "isCurrentUser": boolean;
        "userData": any;
    }
    interface ZeaUserChip {
        /**
          * The density of the chip (large|normal|small|tiny)
         */
        "density": string;
        /**
          * Whether the chip is currently active
         */
        "isActive": boolean;
        /**
          * Whether the chip is for the current user session
         */
        "isCurrentUser": boolean;
        /**
          * Alignment of the profile card (right|left)
         */
        "profileCardAlign": string;
        /**
          * Whether the profile card is currently shown
         */
        "profileCardShown": boolean;
        /**
          * Whether avatar images should be shown or not
         */
        "showImages": boolean;
        /**
          * Whether to ever show the profile card
         */
        "showProfileCard": boolean;
        /**
          * Whether the tooltip should be shown
         */
        "showTooltip": boolean;
        /**
          * User object containing avatar url, firstName, lastName and others
         */
        "userData": any;
    }
    interface ZeaUserChipSet {
        /**
          * The initial z-index for chip overlapping
         */
        "initialZIndex": number;
        /**
          * Number of chips to show before overflow happens
         */
        "overflowLimit": any;
        /**
          * The Zea session
         */
        "session": any;
        /**
          * Whether avatar images should be shown or not
         */
        "showImages": boolean;
    }
}
declare global {
    interface HTMLZeaButtonElement extends Components.ZeaButton, HTMLStencilElement {
    }
    var HTMLZeaButtonElement: {
        prototype: HTMLZeaButtonElement;
        new (): HTMLZeaButtonElement;
    };
    interface HTMLZeaCheckboxElement extends Components.ZeaCheckbox, HTMLStencilElement {
    }
    var HTMLZeaCheckboxElement: {
        prototype: HTMLZeaCheckboxElement;
        new (): HTMLZeaCheckboxElement;
    };
    interface HTMLZeaCopyLinkElement extends Components.ZeaCopyLink, HTMLStencilElement {
    }
    var HTMLZeaCopyLinkElement: {
        prototype: HTMLZeaCopyLinkElement;
        new (): HTMLZeaCopyLinkElement;
    };
    interface HTMLZeaDialogElement extends Components.ZeaDialog, HTMLStencilElement {
    }
    var HTMLZeaDialogElement: {
        prototype: HTMLZeaDialogElement;
        new (): HTMLZeaDialogElement;
    };
    interface HTMLZeaDropdownMenuElement extends Components.ZeaDropdownMenu, HTMLStencilElement {
    }
    var HTMLZeaDropdownMenuElement: {
        prototype: HTMLZeaDropdownMenuElement;
        new (): HTMLZeaDropdownMenuElement;
    };
    interface HTMLZeaFabButtonElement extends Components.ZeaFabButton, HTMLStencilElement {
    }
    var HTMLZeaFabButtonElement: {
        prototype: HTMLZeaFabButtonElement;
        new (): HTMLZeaFabButtonElement;
    };
    interface HTMLZeaFormElement extends Components.ZeaForm, HTMLStencilElement {
    }
    var HTMLZeaFormElement: {
        prototype: HTMLZeaFormElement;
        new (): HTMLZeaFormElement;
    };
    interface HTMLZeaIconElement extends Components.ZeaIcon, HTMLStencilElement {
    }
    var HTMLZeaIconElement: {
        prototype: HTMLZeaIconElement;
        new (): HTMLZeaIconElement;
    };
    interface HTMLZeaImagesGalleryElement extends Components.ZeaImagesGallery, HTMLStencilElement {
    }
    var HTMLZeaImagesGalleryElement: {
        prototype: HTMLZeaImagesGalleryElement;
        new (): HTMLZeaImagesGalleryElement;
    };
    interface HTMLZeaInputElement extends Components.ZeaInput, HTMLStencilElement {
    }
    var HTMLZeaInputElement: {
        prototype: HTMLZeaInputElement;
        new (): HTMLZeaInputElement;
    };
    interface HTMLZeaInputColorElement extends Components.ZeaInputColor, HTMLStencilElement {
    }
    var HTMLZeaInputColorElement: {
        prototype: HTMLZeaInputColorElement;
        new (): HTMLZeaInputColorElement;
    };
    interface HTMLZeaInputDateElement extends Components.ZeaInputDate, HTMLStencilElement {
    }
    var HTMLZeaInputDateElement: {
        prototype: HTMLZeaInputDateElement;
        new (): HTMLZeaInputDateElement;
    };
    interface HTMLZeaInputPhotoElement extends Components.ZeaInputPhoto, HTMLStencilElement {
    }
    var HTMLZeaInputPhotoElement: {
        prototype: HTMLZeaInputPhotoElement;
        new (): HTMLZeaInputPhotoElement;
    };
    interface HTMLZeaInputSearchElement extends Components.ZeaInputSearch, HTMLStencilElement {
    }
    var HTMLZeaInputSearchElement: {
        prototype: HTMLZeaInputSearchElement;
        new (): HTMLZeaInputSearchElement;
    };
    interface HTMLZeaInputSelectElement extends Components.ZeaInputSelect, HTMLStencilElement {
    }
    var HTMLZeaInputSelectElement: {
        prototype: HTMLZeaInputSelectElement;
        new (): HTMLZeaInputSelectElement;
    };
    interface HTMLZeaInputSelectItemElement extends Components.ZeaInputSelectItem, HTMLStencilElement {
    }
    var HTMLZeaInputSelectItemElement: {
        prototype: HTMLZeaInputSelectItemElement;
        new (): HTMLZeaInputSelectItemElement;
    };
    interface HTMLZeaInputTextElement extends Components.ZeaInputText, HTMLStencilElement {
    }
    var HTMLZeaInputTextElement: {
        prototype: HTMLZeaInputTextElement;
        new (): HTMLZeaInputTextElement;
    };
    interface HTMLZeaLayoutElement extends Components.ZeaLayout, HTMLStencilElement {
    }
    var HTMLZeaLayoutElement: {
        prototype: HTMLZeaLayoutElement;
        new (): HTMLZeaLayoutElement;
    };
    interface HTMLZeaMarkdownViewerElement extends Components.ZeaMarkdownViewer, HTMLStencilElement {
    }
    var HTMLZeaMarkdownViewerElement: {
        prototype: HTMLZeaMarkdownViewerElement;
        new (): HTMLZeaMarkdownViewerElement;
    };
    interface HTMLZeaMenuElement extends Components.ZeaMenu, HTMLStencilElement {
    }
    var HTMLZeaMenuElement: {
        prototype: HTMLZeaMenuElement;
        new (): HTMLZeaMenuElement;
    };
    interface HTMLZeaMenuColorElement extends Components.ZeaMenuColor, HTMLStencilElement {
    }
    var HTMLZeaMenuColorElement: {
        prototype: HTMLZeaMenuColorElement;
        new (): HTMLZeaMenuColorElement;
    };
    interface HTMLZeaMenuColorpickerElement extends Components.ZeaMenuColorpicker, HTMLStencilElement {
    }
    var HTMLZeaMenuColorpickerElement: {
        prototype: HTMLZeaMenuColorpickerElement;
        new (): HTMLZeaMenuColorpickerElement;
    };
    interface HTMLZeaMenuItemElement extends Components.ZeaMenuItem, HTMLStencilElement {
    }
    var HTMLZeaMenuItemElement: {
        prototype: HTMLZeaMenuItemElement;
        new (): HTMLZeaMenuItemElement;
    };
    interface HTMLZeaMenuSeparatorElement extends Components.ZeaMenuSeparator, HTMLStencilElement {
    }
    var HTMLZeaMenuSeparatorElement: {
        prototype: HTMLZeaMenuSeparatorElement;
        new (): HTMLZeaMenuSeparatorElement;
    };
    interface HTMLZeaMenuSubitemsElement extends Components.ZeaMenuSubitems, HTMLStencilElement {
    }
    var HTMLZeaMenuSubitemsElement: {
        prototype: HTMLZeaMenuSubitemsElement;
        new (): HTMLZeaMenuSubitemsElement;
    };
    interface HTMLZeaNavigationDrawerElement extends Components.ZeaNavigationDrawer, HTMLStencilElement {
    }
    var HTMLZeaNavigationDrawerElement: {
        prototype: HTMLZeaNavigationDrawerElement;
        new (): HTMLZeaNavigationDrawerElement;
    };
    interface HTMLZeaPanelProgressBarElement extends Components.ZeaPanelProgressBar, HTMLStencilElement {
    }
    var HTMLZeaPanelProgressBarElement: {
        prototype: HTMLZeaPanelProgressBarElement;
        new (): HTMLZeaPanelProgressBarElement;
    };
    interface HTMLZeaParamWidgetBboxElement extends Components.ZeaParamWidgetBbox, HTMLStencilElement {
    }
    var HTMLZeaParamWidgetBboxElement: {
        prototype: HTMLZeaParamWidgetBboxElement;
        new (): HTMLZeaParamWidgetBboxElement;
    };
    interface HTMLZeaParamWidgetBooleanElement extends Components.ZeaParamWidgetBoolean, HTMLStencilElement {
    }
    var HTMLZeaParamWidgetBooleanElement: {
        prototype: HTMLZeaParamWidgetBooleanElement;
        new (): HTMLZeaParamWidgetBooleanElement;
    };
    interface HTMLZeaParamWidgetCodeElement extends Components.ZeaParamWidgetCode, HTMLStencilElement {
    }
    var HTMLZeaParamWidgetCodeElement: {
        prototype: HTMLZeaParamWidgetCodeElement;
        new (): HTMLZeaParamWidgetCodeElement;
    };
    interface HTMLZeaParamWidgetColorElement extends Components.ZeaParamWidgetColor, HTMLStencilElement {
    }
    var HTMLZeaParamWidgetColorElement: {
        prototype: HTMLZeaParamWidgetColorElement;
        new (): HTMLZeaParamWidgetColorElement;
    };
    interface HTMLZeaParamWidgetMaterialColorElement extends Components.ZeaParamWidgetMaterialColor, HTMLStencilElement {
    }
    var HTMLZeaParamWidgetMaterialColorElement: {
        prototype: HTMLZeaParamWidgetMaterialColorElement;
        new (): HTMLZeaParamWidgetMaterialColorElement;
    };
    interface HTMLZeaParamWidgetNumberElement extends Components.ZeaParamWidgetNumber, HTMLStencilElement {
    }
    var HTMLZeaParamWidgetNumberElement: {
        prototype: HTMLZeaParamWidgetNumberElement;
        new (): HTMLZeaParamWidgetNumberElement;
    };
    interface HTMLZeaParamWidgetStringElement extends Components.ZeaParamWidgetString, HTMLStencilElement {
    }
    var HTMLZeaParamWidgetStringElement: {
        prototype: HTMLZeaParamWidgetStringElement;
        new (): HTMLZeaParamWidgetStringElement;
    };
    interface HTMLZeaParamWidgetVec2Element extends Components.ZeaParamWidgetVec2, HTMLStencilElement {
    }
    var HTMLZeaParamWidgetVec2Element: {
        prototype: HTMLZeaParamWidgetVec2Element;
        new (): HTMLZeaParamWidgetVec2Element;
    };
    interface HTMLZeaParamWidgetVec3Element extends Components.ZeaParamWidgetVec3, HTMLStencilElement {
    }
    var HTMLZeaParamWidgetVec3Element: {
        prototype: HTMLZeaParamWidgetVec3Element;
        new (): HTMLZeaParamWidgetVec3Element;
    };
    interface HTMLZeaParamWidgetVec4Element extends Components.ZeaParamWidgetVec4, HTMLStencilElement {
    }
    var HTMLZeaParamWidgetVec4Element: {
        prototype: HTMLZeaParamWidgetVec4Element;
        new (): HTMLZeaParamWidgetVec4Element;
    };
    interface HTMLZeaParamWidgetXfoElement extends Components.ZeaParamWidgetXfo, HTMLStencilElement {
    }
    var HTMLZeaParamWidgetXfoElement: {
        prototype: HTMLZeaParamWidgetXfoElement;
        new (): HTMLZeaParamWidgetXfoElement;
    };
    interface HTMLZeaParameterContainerElement extends Components.ZeaParameterContainer, HTMLStencilElement {
    }
    var HTMLZeaParameterContainerElement: {
        prototype: HTMLZeaParameterContainerElement;
        new (): HTMLZeaParameterContainerElement;
    };
    interface HTMLZeaPopupMenuElement extends Components.ZeaPopupMenu, HTMLStencilElement {
    }
    var HTMLZeaPopupMenuElement: {
        prototype: HTMLZeaPopupMenuElement;
        new (): HTMLZeaPopupMenuElement;
    };
    interface HTMLZeaPopupMenuItemElement extends Components.ZeaPopupMenuItem, HTMLStencilElement {
    }
    var HTMLZeaPopupMenuItemElement: {
        prototype: HTMLZeaPopupMenuItemElement;
        new (): HTMLZeaPopupMenuItemElement;
    };
    interface HTMLZeaProgressBarElement extends Components.ZeaProgressBar, HTMLStencilElement {
    }
    var HTMLZeaProgressBarElement: {
        prototype: HTMLZeaProgressBarElement;
        new (): HTMLZeaProgressBarElement;
    };
    interface HTMLZeaQrCodeElement extends Components.ZeaQrCode, HTMLStencilElement {
    }
    var HTMLZeaQrCodeElement: {
        prototype: HTMLZeaQrCodeElement;
        new (): HTMLZeaQrCodeElement;
    };
    interface HTMLZeaScrollPaneElement extends Components.ZeaScrollPane, HTMLStencilElement {
    }
    var HTMLZeaScrollPaneElement: {
        prototype: HTMLZeaScrollPaneElement;
        new (): HTMLZeaScrollPaneElement;
    };
    interface HTMLZeaSwitchElement extends Components.ZeaSwitch, HTMLStencilElement {
    }
    var HTMLZeaSwitchElement: {
        prototype: HTMLZeaSwitchElement;
        new (): HTMLZeaSwitchElement;
    };
    interface HTMLZeaTabsElement extends Components.ZeaTabs, HTMLStencilElement {
    }
    var HTMLZeaTabsElement: {
        prototype: HTMLZeaTabsElement;
        new (): HTMLZeaTabsElement;
    };
    interface HTMLZeaToolbarElement extends Components.ZeaToolbar, HTMLStencilElement {
    }
    var HTMLZeaToolbarElement: {
        prototype: HTMLZeaToolbarElement;
        new (): HTMLZeaToolbarElement;
    };
    interface HTMLZeaToolbarColorpickerElement extends Components.ZeaToolbarColorpicker, HTMLStencilElement {
    }
    var HTMLZeaToolbarColorpickerElement: {
        prototype: HTMLZeaToolbarColorpickerElement;
        new (): HTMLZeaToolbarColorpickerElement;
    };
    interface HTMLZeaToolbarToolElement extends Components.ZeaToolbarTool, HTMLStencilElement {
    }
    var HTMLZeaToolbarToolElement: {
        prototype: HTMLZeaToolbarToolElement;
        new (): HTMLZeaToolbarToolElement;
    };
    interface HTMLZeaToolbarToolsetElement extends Components.ZeaToolbarToolset, HTMLStencilElement {
    }
    var HTMLZeaToolbarToolsetElement: {
        prototype: HTMLZeaToolbarToolsetElement;
        new (): HTMLZeaToolbarToolsetElement;
    };
    interface HTMLZeaTreeItemElementElement extends Components.ZeaTreeItemElement, HTMLStencilElement {
    }
    var HTMLZeaTreeItemElementElement: {
        prototype: HTMLZeaTreeItemElementElement;
        new (): HTMLZeaTreeItemElementElement;
    };
    interface HTMLZeaTreeViewElement extends Components.ZeaTreeView, HTMLStencilElement {
    }
    var HTMLZeaTreeViewElement: {
        prototype: HTMLZeaTreeViewElement;
        new (): HTMLZeaTreeViewElement;
    };
    interface HTMLZeaUserCardElement extends Components.ZeaUserCard, HTMLStencilElement {
    }
    var HTMLZeaUserCardElement: {
        prototype: HTMLZeaUserCardElement;
        new (): HTMLZeaUserCardElement;
    };
    interface HTMLZeaUserChipElement extends Components.ZeaUserChip, HTMLStencilElement {
    }
    var HTMLZeaUserChipElement: {
        prototype: HTMLZeaUserChipElement;
        new (): HTMLZeaUserChipElement;
    };
    interface HTMLZeaUserChipSetElement extends Components.ZeaUserChipSet, HTMLStencilElement {
    }
    var HTMLZeaUserChipSetElement: {
        prototype: HTMLZeaUserChipSetElement;
        new (): HTMLZeaUserChipSetElement;
    };
    interface HTMLElementTagNameMap {
        "zea-button": HTMLZeaButtonElement;
        "zea-checkbox": HTMLZeaCheckboxElement;
        "zea-copy-link": HTMLZeaCopyLinkElement;
        "zea-dialog": HTMLZeaDialogElement;
        "zea-dropdown-menu": HTMLZeaDropdownMenuElement;
        "zea-fab-button": HTMLZeaFabButtonElement;
        "zea-form": HTMLZeaFormElement;
        "zea-icon": HTMLZeaIconElement;
        "zea-images-gallery": HTMLZeaImagesGalleryElement;
        "zea-input": HTMLZeaInputElement;
        "zea-input-color": HTMLZeaInputColorElement;
        "zea-input-date": HTMLZeaInputDateElement;
        "zea-input-photo": HTMLZeaInputPhotoElement;
        "zea-input-search": HTMLZeaInputSearchElement;
        "zea-input-select": HTMLZeaInputSelectElement;
        "zea-input-select-item": HTMLZeaInputSelectItemElement;
        "zea-input-text": HTMLZeaInputTextElement;
        "zea-layout": HTMLZeaLayoutElement;
        "zea-markdown-viewer": HTMLZeaMarkdownViewerElement;
        "zea-menu": HTMLZeaMenuElement;
        "zea-menu-color": HTMLZeaMenuColorElement;
        "zea-menu-colorpicker": HTMLZeaMenuColorpickerElement;
        "zea-menu-item": HTMLZeaMenuItemElement;
        "zea-menu-separator": HTMLZeaMenuSeparatorElement;
        "zea-menu-subitems": HTMLZeaMenuSubitemsElement;
        "zea-navigation-drawer": HTMLZeaNavigationDrawerElement;
        "zea-panel-progress-bar": HTMLZeaPanelProgressBarElement;
        "zea-param-widget-bbox": HTMLZeaParamWidgetBboxElement;
        "zea-param-widget-boolean": HTMLZeaParamWidgetBooleanElement;
        "zea-param-widget-code": HTMLZeaParamWidgetCodeElement;
        "zea-param-widget-color": HTMLZeaParamWidgetColorElement;
        "zea-param-widget-material-color": HTMLZeaParamWidgetMaterialColorElement;
        "zea-param-widget-number": HTMLZeaParamWidgetNumberElement;
        "zea-param-widget-string": HTMLZeaParamWidgetStringElement;
        "zea-param-widget-vec2": HTMLZeaParamWidgetVec2Element;
        "zea-param-widget-vec3": HTMLZeaParamWidgetVec3Element;
        "zea-param-widget-vec4": HTMLZeaParamWidgetVec4Element;
        "zea-param-widget-xfo": HTMLZeaParamWidgetXfoElement;
        "zea-parameter-container": HTMLZeaParameterContainerElement;
        "zea-popup-menu": HTMLZeaPopupMenuElement;
        "zea-popup-menu-item": HTMLZeaPopupMenuItemElement;
        "zea-progress-bar": HTMLZeaProgressBarElement;
        "zea-qr-code": HTMLZeaQrCodeElement;
        "zea-scroll-pane": HTMLZeaScrollPaneElement;
        "zea-switch": HTMLZeaSwitchElement;
        "zea-tabs": HTMLZeaTabsElement;
        "zea-toolbar": HTMLZeaToolbarElement;
        "zea-toolbar-colorpicker": HTMLZeaToolbarColorpickerElement;
        "zea-toolbar-tool": HTMLZeaToolbarToolElement;
        "zea-toolbar-toolset": HTMLZeaToolbarToolsetElement;
        "zea-tree-item-element": HTMLZeaTreeItemElementElement;
        "zea-tree-view": HTMLZeaTreeViewElement;
        "zea-user-card": HTMLZeaUserCardElement;
        "zea-user-chip": HTMLZeaUserChipElement;
        "zea-user-chip-set": HTMLZeaUserChipSetElement;
    }
}
declare namespace LocalJSX {
    interface ZeaButton {
        /**
          * Whether the button should be disabled (true) or not (false)
         */
        "color"?: boolean;
        /**
          * Whether the button should be disabled (true) or not (false)
         */
        "density"?: string;
        /**
          * Whether the button should be disabled (true) or not (false)
         */
        "disabled"?: boolean;
        /**
          * Text/html to be displayed inside the button
         */
        "htmlContent"?: string;
        /**
          * Style variant for the button
         */
        "variant"?: string;
    }
    interface ZeaCheckbox {
        /**
          * /**    Whether the checkbox is checked
         */
        "checked"?: boolean;
        /**
          * /**    Whether the checkbox is disabled
         */
        "disabled"?: boolean;
        /**
          * Whether the checkbox should be presented as a radio button
         */
        "isRadio"?: boolean;
        /**
          * /**    Text/html to be displayed inside the button
         */
        "name"?: string;
    }
    interface ZeaCopyLink {
        "link"?: string;
        "tooltipIsVisible"?: boolean;
        "tooltipText"?: string;
    }
    interface ZeaDialog {
        "addPadding"?: boolean;
        "allowClose"?: boolean;
        "fullScreenMobile"?: boolean;
        "onDialogClose"?: (event: CustomEvent<any>) => void;
        "showBackdrop"?: boolean;
        "showTitle"?: boolean;
        "shown"?: boolean;
        "width"?: string;
    }
    interface ZeaDropdownMenu {
        /**
          * The application data TODO: pass actionRegistry only instead of whole appData
         */
        "appData"?: any;
    }
    interface ZeaFabButton {
        /**
          * /**    Whether the button should be disabled (true) or not (false)
         */
        "disabled"?: false;
    }
    interface ZeaForm {
        "formValue"?: any;
        "isValid"?: boolean;
        "submitCallback"?: any;
        "submitText"?: string;
        "validate"?: boolean;
    }
    interface ZeaIcon {
        /**
          * The icon name within the chosen library
         */
        "name"?: string;
        /**
          * The icon size in pixels
         */
        "size"?: number;
        /**
          * The library to load the icon from
         */
        "type"?: string;
    }
    interface ZeaImagesGallery {
        /**
          * Number of columns
         */
        "columns"?: number;
        /**
          * Number of featured images
         */
        "featured"?: number;
        /**
          * Folder from which to take the files to display.
         */
        "folder"?: { children: any[]; };
    }
    interface ZeaInput {
        "autoValidate"?: boolean;
        "colorOptions"?: string[];
        "colorPopupAlign"?: string;
        "colorPopupShown"?: boolean;
        "invalidMessage"?: string;
        "invalidMessageShown"?: boolean;
        "isValid"?: boolean;
        "label"?: string;
        "name"?: string;
        "photoBase64"?: string;
        "required"?: boolean;
        "selectedColor"?: any;
        "showLabel"?: boolean;
        "type"?: string;
        "value"?: any;
    }
    interface ZeaInputColor {
        "colorOptions"?: string[];
        "colorPopupAlign"?: string;
        "colorPopupShown"?: boolean;
        "invalidMessage"?: string;
        "invalidMessageShown"?: boolean;
        "isValid"?: boolean;
        "label"?: string;
        "name"?: string;
        "required"?: boolean;
        "selectedColor"?: any;
        "showLabel"?: boolean;
        "value"?: any;
    }
    interface ZeaInputDate {
        /**
          * A test prop.
         */
        "test"?: string;
    }
    interface ZeaInputPhoto {
        /**
          * A test prop.
         */
        "test"?: string;
    }
    interface ZeaInputSearch {
        "placeholder"?: string;
    }
    interface ZeaInputSelect {
        "autoValidate"?: boolean;
        "invalidMessage"?: string;
        "invalidMessageShown"?: boolean;
        "isValid"?: boolean;
        "label"?: string;
        "name"?: string;
        "optionsShown"?: boolean;
        "required"?: boolean;
        "selectCallback"?: any;
        "showLabel"?: boolean;
        "value"?: any;
    }
    interface ZeaInputSelectItem {
        "value"?: any;
    }
    interface ZeaInputText {
        "autoValidate"?: boolean;
        "disabled"?: boolean;
        "hidden"?: boolean;
        "invalidMessage"?: string;
        "invalidMessageShown"?: boolean;
        "isValid"?: boolean;
        "label"?: string;
        "name"?: string;
        "required"?: boolean;
        "showLabel"?: boolean;
        "value"?: any;
    }
    interface ZeaLayout {
        "cellASize"?: number;
        "cellCSize"?: number;
        "cellCount"?: number;
        "orientation"?: string;
        "resizeCellA"?: boolean;
        "resizeCellC"?: boolean;
        "resizeInterval"?: number;
        "showBorders"?: boolean;
    }
    interface ZeaMarkdownViewer {
        /**
          * MD text to be converted
         */
        "mdText"?: string;
    }
    interface ZeaMenu {
        "anchorIcon"?: string;
        "anchorIconSize"?: number;
        "contextualAlign"?: string;
        "leftOffset"?: string;
        "orientation"?: string;
        "showAnchor"?: boolean;
        "shown"?: boolean;
        "topOffset"?: string;
        "type"?: string;
    }
    interface ZeaMenuColor {
        /**
          * The color assigned to this item
         */
        "bgColor"?: string;
        /**
          * The color of the foreground (icon) for the tool
         */
        "fgColor"?: string;
    }
    interface ZeaMenuColorpicker {
        "shown"?: boolean;
        "userColor"?: string;
    }
    interface ZeaMenuItem {
        "active"?: boolean;
        "allowHover"?: boolean;
        "callback"?: any;
        "checked"?: boolean;
        "hasCheckbox"?: boolean;
        "hasRadio"?: boolean;
        "hasSubitems"?: boolean;
        "hotkey"?: string;
        "isPushButton"?: boolean;
        /**
          * Event to emit when an item gets clicked
         */
        "onZeaMenuItemClick"?: (event: CustomEvent<any>) => void;
        /**
          * Event to emit when an item gets clicked
         */
        "onZeaMenuItemPressed"?: (event: CustomEvent<any>) => void;
        "rootMenu"?: HTMLElement;
        "shown"?: boolean;
        "switch"?: boolean;
        "type"?: string;
    }
    interface ZeaMenuSeparator {
        "class"?: string;
        "orientation"?: string;
    }
    interface ZeaMenuSubitems {
        /**
          * The item this subitems belongs to
         */
        "parentItem"?: any;
        /**
          * Whether the children should have checkboxes and behave as a radio button
         */
        "radioSelect"?: boolean;
        /**
          * The root menu this item belongs to
         */
        "rootMenu"?: HTMLElement;
        /**
          * Whether it is/should be shown
         */
        "shown"?: boolean;
        /**
          * Menu type
         */
        "type"?: string;
    }
    interface ZeaNavigationDrawer {
        "onNavDrawerClosed"?: (event: CustomEvent<any>) => void;
        "onNavDrawerOpen"?: (event: CustomEvent<any>) => void;
        "shown"?: boolean;
    }
    interface ZeaPanelProgressBar {
        "progressBar"?: any;
    }
    interface ZeaParamWidgetBbox {
        /**
          * Object that hosts undoRedo instance, parameter class and parameter change class. These last two so we can reconstruct the component dynamically.
         */
        "appData"?: object;
        /**
          * Parameter being parsed
         */
        "parameter"?: any;
    }
    interface ZeaParamWidgetBoolean {
        /**
          * The application data
         */
        "appData"?: any;
        /**
          * Whether the checkbox should be checked
         */
        "checked"?: boolean;
        /**
          * Parameter to be edited
         */
        "parameter"?: any;
    }
    interface ZeaParamWidgetCode {
        /**
          * The application data
         */
        "appData"?: any;
        /**
          * Parameter to be edited
         */
        "parameter"?: any;
    }
    interface ZeaParamWidgetColor {
        /**
          * The application data
         */
        "appData"?: any;
        /**
          * Parameter to be edited
         */
        "parameter"?: any;
    }
    interface ZeaParamWidgetMaterialColor {
        /**
          * The application data
         */
        "appData"?: any;
        /**
          * Parameter to be edited
         */
        "parameter"?: any;
    }
    interface ZeaParamWidgetNumber {
        /**
          * The application data
         */
        "appData"?: any;
        /**
          * Html input type
         */
        "inputType"?: string;
        /**
          * Parameter to be edited
         */
        "parameter"?: any;
        /**
          * The value of the number
         */
        "value"?: any;
    }
    interface ZeaParamWidgetString {
        /**
          * The application data
         */
        "appData"?: any;
        /**
          * Parameter to be edited
         */
        "parameter"?: any;
    }
    interface ZeaParamWidgetVec2 {
        /**
          * The application data
         */
        "appData"?: any;
        /**
          * Parameter to be edited
         */
        "parameter"?: any;
    }
    interface ZeaParamWidgetVec3 {
        /**
          * The application data
         */
        "appData"?: any;
        /**
          * Parameter to be edited
         */
        "parameter"?: any;
    }
    interface ZeaParamWidgetVec4 {
        /**
          * The application data
         */
        "appData"?: any;
        /**
          * Parameter to be edited
         */
        "parameter"?: any;
    }
    interface ZeaParamWidgetXfo {
        /**
          * The application data
         */
        "appData"?: any;
        /**
          * Parameter to be edited
         */
        "parameter"?: any;
    }
    interface ZeaParameterContainer {
        /**
          * The application data
         */
        "appData"?: any;
        /**
          * The parameter owner.
         */
        "parameterOwner"?: any;
    }
    interface ZeaPopupMenu {
        /**
          * Anchor element
         */
        "anchorElement"?: HTMLElement;
        "leftOffset"?: string;
        /**
          * Whether the menu should be shown
         */
        "shown"?: boolean;
        "topOffset"?: string;
    }
    interface ZeaPopupMenuItem {
        /**
          * Click Handler
         */
        "clickHandler"?: CallableFunction;
        /**
          * Material icon name for item end
         */
        "endIcon"?: string;
        /**
          * Material icon name for item start
         */
        "startIcon"?: string;
    }
    interface ZeaProgressBar {
        /**
          * The color for the background track
         */
        "backgroundColor"?: any;
        /**
          * The color for the bar
         */
        "color"?: any;
        /**
          * The animation type for the indeterminate bar ( continuous | pulsating)
         */
        "indeterminateAnimation"?: any;
        /**
          * The progress (width) percentage for the bar
         */
        "percent"?: any;
        /**
          * The size (height) of the progress bar
         */
        "size"?: any;
        /**
          * The bar type (determinate | indeterminate)
         */
        "type"?: string;
    }
    interface ZeaQrCode {
        /**
          * The content to code into the QR
         */
        "content"?: string;
        /**
          * The content to code into the QR
         */
        "scale"?: number;
    }
    interface ZeaScrollPane {
    }
    interface ZeaSwitch {
        /**
          * Whether the switch is checked
         */
        "checked"?: boolean;
        /**
          * Whether the switch is disabled
         */
        "disabled"?: boolean;
        /**
          * Text/html to be displayed inside the button
         */
        "name"?: string;
        /**
          * State label to show next to the switch
         */
        "stateLabel"?: string;
    }
    interface ZeaTabs {
        "density"?: string;
        "orientation"?: string;
    }
    interface ZeaToolbar {
        /**
          * Array of tools
         */
        "tools"?: any;
    }
    interface ZeaToolbarColorpicker {
        /**
          * Array of tools
         */
        "data"?: any;
        /**
          * Whether the color dropdown should be shown
         */
        "displayChildren"?: boolean;
    }
    interface ZeaToolbarTool {
        /**
          * The tool data
         */
        "data"?: any;
        /**
          * Whether the tool is currently active
         */
        "isActive"?: boolean;
        /**
          * Event to emit when user chip gets clicked
         */
        "onZeaToolbarToolClick"?: (event: CustomEvent<any>) => void;
    }
    interface ZeaToolbarToolset {
        /**
          * Array of tools
         */
        "data"?: any;
    }
    interface ZeaTreeItemElement {
        "appData"?: any;
        "isExpanded"?: boolean;
        "isHighlighted"?: boolean;
        "isRoot"?: boolean;
        "isSelected"?: boolean;
        "isTreeItem"?: boolean;
        "isVisible"?: boolean;
        "label"?: string;
        "treeItem"?: any;
    }
    interface ZeaTreeView {
        "appData"?: any;
        "rootItem"?: any;
    }
    interface ZeaUserCard {
        /**
          * Whether additional data is currently shown
         */
        "additionalDataShown"?: boolean;
        /**
          * Whether to show the collpase control for additional data
         */
        "collapsible"?: boolean;
        /**
          * Density and size of elements
         */
        "density"?: string;
        /**
          * Whether the card is for the current user session
         */
        "isCurrentUser"?: boolean;
        "userData"?: any;
    }
    interface ZeaUserChip {
        /**
          * The density of the chip (large|normal|small|tiny)
         */
        "density"?: string;
        /**
          * Whether the chip is currently active
         */
        "isActive"?: boolean;
        /**
          * Whether the chip is for the current user session
         */
        "isCurrentUser"?: boolean;
        /**
          * Event to emit when user chip gets clicked
         */
        "onZeaUserClicked"?: (event: CustomEvent<any>) => void;
        /**
          * Alignment of the profile card (right|left)
         */
        "profileCardAlign"?: string;
        /**
          * Whether the profile card is currently shown
         */
        "profileCardShown"?: boolean;
        /**
          * Whether avatar images should be shown or not
         */
        "showImages"?: boolean;
        /**
          * Whether to ever show the profile card
         */
        "showProfileCard"?: boolean;
        /**
          * Whether the tooltip should be shown
         */
        "showTooltip"?: boolean;
        /**
          * User object containing avatar url, firstName, lastName and others
         */
        "userData"?: any;
    }
    interface ZeaUserChipSet {
        /**
          * The initial z-index for chip overlapping
         */
        "initialZIndex"?: number;
        /**
          * Number of chips to show before overflow happens
         */
        "overflowLimit"?: any;
        /**
          * The Zea session
         */
        "session"?: any;
        /**
          * Whether avatar images should be shown or not
         */
        "showImages"?: boolean;
    }
    interface IntrinsicElements {
        "zea-button": ZeaButton;
        "zea-checkbox": ZeaCheckbox;
        "zea-copy-link": ZeaCopyLink;
        "zea-dialog": ZeaDialog;
        "zea-dropdown-menu": ZeaDropdownMenu;
        "zea-fab-button": ZeaFabButton;
        "zea-form": ZeaForm;
        "zea-icon": ZeaIcon;
        "zea-images-gallery": ZeaImagesGallery;
        "zea-input": ZeaInput;
        "zea-input-color": ZeaInputColor;
        "zea-input-date": ZeaInputDate;
        "zea-input-photo": ZeaInputPhoto;
        "zea-input-search": ZeaInputSearch;
        "zea-input-select": ZeaInputSelect;
        "zea-input-select-item": ZeaInputSelectItem;
        "zea-input-text": ZeaInputText;
        "zea-layout": ZeaLayout;
        "zea-markdown-viewer": ZeaMarkdownViewer;
        "zea-menu": ZeaMenu;
        "zea-menu-color": ZeaMenuColor;
        "zea-menu-colorpicker": ZeaMenuColorpicker;
        "zea-menu-item": ZeaMenuItem;
        "zea-menu-separator": ZeaMenuSeparator;
        "zea-menu-subitems": ZeaMenuSubitems;
        "zea-navigation-drawer": ZeaNavigationDrawer;
        "zea-panel-progress-bar": ZeaPanelProgressBar;
        "zea-param-widget-bbox": ZeaParamWidgetBbox;
        "zea-param-widget-boolean": ZeaParamWidgetBoolean;
        "zea-param-widget-code": ZeaParamWidgetCode;
        "zea-param-widget-color": ZeaParamWidgetColor;
        "zea-param-widget-material-color": ZeaParamWidgetMaterialColor;
        "zea-param-widget-number": ZeaParamWidgetNumber;
        "zea-param-widget-string": ZeaParamWidgetString;
        "zea-param-widget-vec2": ZeaParamWidgetVec2;
        "zea-param-widget-vec3": ZeaParamWidgetVec3;
        "zea-param-widget-vec4": ZeaParamWidgetVec4;
        "zea-param-widget-xfo": ZeaParamWidgetXfo;
        "zea-parameter-container": ZeaParameterContainer;
        "zea-popup-menu": ZeaPopupMenu;
        "zea-popup-menu-item": ZeaPopupMenuItem;
        "zea-progress-bar": ZeaProgressBar;
        "zea-qr-code": ZeaQrCode;
        "zea-scroll-pane": ZeaScrollPane;
        "zea-switch": ZeaSwitch;
        "zea-tabs": ZeaTabs;
        "zea-toolbar": ZeaToolbar;
        "zea-toolbar-colorpicker": ZeaToolbarColorpicker;
        "zea-toolbar-tool": ZeaToolbarTool;
        "zea-toolbar-toolset": ZeaToolbarToolset;
        "zea-tree-item-element": ZeaTreeItemElement;
        "zea-tree-view": ZeaTreeView;
        "zea-user-card": ZeaUserCard;
        "zea-user-chip": ZeaUserChip;
        "zea-user-chip-set": ZeaUserChipSet;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "zea-button": LocalJSX.ZeaButton & JSXBase.HTMLAttributes<HTMLZeaButtonElement>;
            "zea-checkbox": LocalJSX.ZeaCheckbox & JSXBase.HTMLAttributes<HTMLZeaCheckboxElement>;
            "zea-copy-link": LocalJSX.ZeaCopyLink & JSXBase.HTMLAttributes<HTMLZeaCopyLinkElement>;
            "zea-dialog": LocalJSX.ZeaDialog & JSXBase.HTMLAttributes<HTMLZeaDialogElement>;
            "zea-dropdown-menu": LocalJSX.ZeaDropdownMenu & JSXBase.HTMLAttributes<HTMLZeaDropdownMenuElement>;
            "zea-fab-button": LocalJSX.ZeaFabButton & JSXBase.HTMLAttributes<HTMLZeaFabButtonElement>;
            "zea-form": LocalJSX.ZeaForm & JSXBase.HTMLAttributes<HTMLZeaFormElement>;
            "zea-icon": LocalJSX.ZeaIcon & JSXBase.HTMLAttributes<HTMLZeaIconElement>;
            "zea-images-gallery": LocalJSX.ZeaImagesGallery & JSXBase.HTMLAttributes<HTMLZeaImagesGalleryElement>;
            "zea-input": LocalJSX.ZeaInput & JSXBase.HTMLAttributes<HTMLZeaInputElement>;
            "zea-input-color": LocalJSX.ZeaInputColor & JSXBase.HTMLAttributes<HTMLZeaInputColorElement>;
            "zea-input-date": LocalJSX.ZeaInputDate & JSXBase.HTMLAttributes<HTMLZeaInputDateElement>;
            "zea-input-photo": LocalJSX.ZeaInputPhoto & JSXBase.HTMLAttributes<HTMLZeaInputPhotoElement>;
            "zea-input-search": LocalJSX.ZeaInputSearch & JSXBase.HTMLAttributes<HTMLZeaInputSearchElement>;
            "zea-input-select": LocalJSX.ZeaInputSelect & JSXBase.HTMLAttributes<HTMLZeaInputSelectElement>;
            "zea-input-select-item": LocalJSX.ZeaInputSelectItem & JSXBase.HTMLAttributes<HTMLZeaInputSelectItemElement>;
            "zea-input-text": LocalJSX.ZeaInputText & JSXBase.HTMLAttributes<HTMLZeaInputTextElement>;
            "zea-layout": LocalJSX.ZeaLayout & JSXBase.HTMLAttributes<HTMLZeaLayoutElement>;
            "zea-markdown-viewer": LocalJSX.ZeaMarkdownViewer & JSXBase.HTMLAttributes<HTMLZeaMarkdownViewerElement>;
            "zea-menu": LocalJSX.ZeaMenu & JSXBase.HTMLAttributes<HTMLZeaMenuElement>;
            "zea-menu-color": LocalJSX.ZeaMenuColor & JSXBase.HTMLAttributes<HTMLZeaMenuColorElement>;
            "zea-menu-colorpicker": LocalJSX.ZeaMenuColorpicker & JSXBase.HTMLAttributes<HTMLZeaMenuColorpickerElement>;
            "zea-menu-item": LocalJSX.ZeaMenuItem & JSXBase.HTMLAttributes<HTMLZeaMenuItemElement>;
            "zea-menu-separator": LocalJSX.ZeaMenuSeparator & JSXBase.HTMLAttributes<HTMLZeaMenuSeparatorElement>;
            "zea-menu-subitems": LocalJSX.ZeaMenuSubitems & JSXBase.HTMLAttributes<HTMLZeaMenuSubitemsElement>;
            "zea-navigation-drawer": LocalJSX.ZeaNavigationDrawer & JSXBase.HTMLAttributes<HTMLZeaNavigationDrawerElement>;
            "zea-panel-progress-bar": LocalJSX.ZeaPanelProgressBar & JSXBase.HTMLAttributes<HTMLZeaPanelProgressBarElement>;
            "zea-param-widget-bbox": LocalJSX.ZeaParamWidgetBbox & JSXBase.HTMLAttributes<HTMLZeaParamWidgetBboxElement>;
            "zea-param-widget-boolean": LocalJSX.ZeaParamWidgetBoolean & JSXBase.HTMLAttributes<HTMLZeaParamWidgetBooleanElement>;
            "zea-param-widget-code": LocalJSX.ZeaParamWidgetCode & JSXBase.HTMLAttributes<HTMLZeaParamWidgetCodeElement>;
            "zea-param-widget-color": LocalJSX.ZeaParamWidgetColor & JSXBase.HTMLAttributes<HTMLZeaParamWidgetColorElement>;
            "zea-param-widget-material-color": LocalJSX.ZeaParamWidgetMaterialColor & JSXBase.HTMLAttributes<HTMLZeaParamWidgetMaterialColorElement>;
            "zea-param-widget-number": LocalJSX.ZeaParamWidgetNumber & JSXBase.HTMLAttributes<HTMLZeaParamWidgetNumberElement>;
            "zea-param-widget-string": LocalJSX.ZeaParamWidgetString & JSXBase.HTMLAttributes<HTMLZeaParamWidgetStringElement>;
            "zea-param-widget-vec2": LocalJSX.ZeaParamWidgetVec2 & JSXBase.HTMLAttributes<HTMLZeaParamWidgetVec2Element>;
            "zea-param-widget-vec3": LocalJSX.ZeaParamWidgetVec3 & JSXBase.HTMLAttributes<HTMLZeaParamWidgetVec3Element>;
            "zea-param-widget-vec4": LocalJSX.ZeaParamWidgetVec4 & JSXBase.HTMLAttributes<HTMLZeaParamWidgetVec4Element>;
            "zea-param-widget-xfo": LocalJSX.ZeaParamWidgetXfo & JSXBase.HTMLAttributes<HTMLZeaParamWidgetXfoElement>;
            "zea-parameter-container": LocalJSX.ZeaParameterContainer & JSXBase.HTMLAttributes<HTMLZeaParameterContainerElement>;
            "zea-popup-menu": LocalJSX.ZeaPopupMenu & JSXBase.HTMLAttributes<HTMLZeaPopupMenuElement>;
            "zea-popup-menu-item": LocalJSX.ZeaPopupMenuItem & JSXBase.HTMLAttributes<HTMLZeaPopupMenuItemElement>;
            "zea-progress-bar": LocalJSX.ZeaProgressBar & JSXBase.HTMLAttributes<HTMLZeaProgressBarElement>;
            "zea-qr-code": LocalJSX.ZeaQrCode & JSXBase.HTMLAttributes<HTMLZeaQrCodeElement>;
            "zea-scroll-pane": LocalJSX.ZeaScrollPane & JSXBase.HTMLAttributes<HTMLZeaScrollPaneElement>;
            "zea-switch": LocalJSX.ZeaSwitch & JSXBase.HTMLAttributes<HTMLZeaSwitchElement>;
            "zea-tabs": LocalJSX.ZeaTabs & JSXBase.HTMLAttributes<HTMLZeaTabsElement>;
            "zea-toolbar": LocalJSX.ZeaToolbar & JSXBase.HTMLAttributes<HTMLZeaToolbarElement>;
            "zea-toolbar-colorpicker": LocalJSX.ZeaToolbarColorpicker & JSXBase.HTMLAttributes<HTMLZeaToolbarColorpickerElement>;
            "zea-toolbar-tool": LocalJSX.ZeaToolbarTool & JSXBase.HTMLAttributes<HTMLZeaToolbarToolElement>;
            "zea-toolbar-toolset": LocalJSX.ZeaToolbarToolset & JSXBase.HTMLAttributes<HTMLZeaToolbarToolsetElement>;
            "zea-tree-item-element": LocalJSX.ZeaTreeItemElement & JSXBase.HTMLAttributes<HTMLZeaTreeItemElementElement>;
            "zea-tree-view": LocalJSX.ZeaTreeView & JSXBase.HTMLAttributes<HTMLZeaTreeViewElement>;
            "zea-user-card": LocalJSX.ZeaUserCard & JSXBase.HTMLAttributes<HTMLZeaUserCardElement>;
            "zea-user-chip": LocalJSX.ZeaUserChip & JSXBase.HTMLAttributes<HTMLZeaUserChipElement>;
            "zea-user-chip-set": LocalJSX.ZeaUserChipSet & JSXBase.HTMLAttributes<HTMLZeaUserChipSetElement>;
        }
    }
}
