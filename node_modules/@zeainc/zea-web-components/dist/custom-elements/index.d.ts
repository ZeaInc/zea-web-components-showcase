/* ZeaWebComponents custom elements bundle */

import { Components, JSX } from "../types/components";

interface ZeaButton extends Components.ZeaButton, HTMLElement {}
export const ZeaButton: {
  prototype: ZeaButton;
  new (): ZeaButton;
};

interface ZeaCheckbox extends Components.ZeaCheckbox, HTMLElement {}
export const ZeaCheckbox: {
  prototype: ZeaCheckbox;
  new (): ZeaCheckbox;
};

interface ZeaCopyLink extends Components.ZeaCopyLink, HTMLElement {}
export const ZeaCopyLink: {
  prototype: ZeaCopyLink;
  new (): ZeaCopyLink;
};

interface ZeaDialog extends Components.ZeaDialog, HTMLElement {}
export const ZeaDialog: {
  prototype: ZeaDialog;
  new (): ZeaDialog;
};

interface ZeaDropdownMenu extends Components.ZeaDropdownMenu, HTMLElement {}
export const ZeaDropdownMenu: {
  prototype: ZeaDropdownMenu;
  new (): ZeaDropdownMenu;
};

interface ZeaFabButton extends Components.ZeaFabButton, HTMLElement {}
export const ZeaFabButton: {
  prototype: ZeaFabButton;
  new (): ZeaFabButton;
};

interface ZeaForm extends Components.ZeaForm, HTMLElement {}
export const ZeaForm: {
  prototype: ZeaForm;
  new (): ZeaForm;
};

interface ZeaIcon extends Components.ZeaIcon, HTMLElement {}
export const ZeaIcon: {
  prototype: ZeaIcon;
  new (): ZeaIcon;
};

interface ZeaImagesGallery extends Components.ZeaImagesGallery, HTMLElement {}
export const ZeaImagesGallery: {
  prototype: ZeaImagesGallery;
  new (): ZeaImagesGallery;
};

interface ZeaInput extends Components.ZeaInput, HTMLElement {}
export const ZeaInput: {
  prototype: ZeaInput;
  new (): ZeaInput;
};

interface ZeaInputColor extends Components.ZeaInputColor, HTMLElement {}
export const ZeaInputColor: {
  prototype: ZeaInputColor;
  new (): ZeaInputColor;
};

interface ZeaInputDate extends Components.ZeaInputDate, HTMLElement {}
export const ZeaInputDate: {
  prototype: ZeaInputDate;
  new (): ZeaInputDate;
};

interface ZeaInputPhoto extends Components.ZeaInputPhoto, HTMLElement {}
export const ZeaInputPhoto: {
  prototype: ZeaInputPhoto;
  new (): ZeaInputPhoto;
};

interface ZeaInputSearch extends Components.ZeaInputSearch, HTMLElement {}
export const ZeaInputSearch: {
  prototype: ZeaInputSearch;
  new (): ZeaInputSearch;
};

interface ZeaInputSelect extends Components.ZeaInputSelect, HTMLElement {}
export const ZeaInputSelect: {
  prototype: ZeaInputSelect;
  new (): ZeaInputSelect;
};

interface ZeaInputSelectItem extends Components.ZeaInputSelectItem, HTMLElement {}
export const ZeaInputSelectItem: {
  prototype: ZeaInputSelectItem;
  new (): ZeaInputSelectItem;
};

interface ZeaInputText extends Components.ZeaInputText, HTMLElement {}
export const ZeaInputText: {
  prototype: ZeaInputText;
  new (): ZeaInputText;
};

interface ZeaLayout extends Components.ZeaLayout, HTMLElement {}
export const ZeaLayout: {
  prototype: ZeaLayout;
  new (): ZeaLayout;
};

interface ZeaMarkdownViewer extends Components.ZeaMarkdownViewer, HTMLElement {}
export const ZeaMarkdownViewer: {
  prototype: ZeaMarkdownViewer;
  new (): ZeaMarkdownViewer;
};

interface ZeaMenu extends Components.ZeaMenu, HTMLElement {}
export const ZeaMenu: {
  prototype: ZeaMenu;
  new (): ZeaMenu;
};

interface ZeaMenuColor extends Components.ZeaMenuColor, HTMLElement {}
export const ZeaMenuColor: {
  prototype: ZeaMenuColor;
  new (): ZeaMenuColor;
};

interface ZeaMenuColorpicker extends Components.ZeaMenuColorpicker, HTMLElement {}
export const ZeaMenuColorpicker: {
  prototype: ZeaMenuColorpicker;
  new (): ZeaMenuColorpicker;
};

interface ZeaMenuItem extends Components.ZeaMenuItem, HTMLElement {}
export const ZeaMenuItem: {
  prototype: ZeaMenuItem;
  new (): ZeaMenuItem;
};

interface ZeaMenuSeparator extends Components.ZeaMenuSeparator, HTMLElement {}
export const ZeaMenuSeparator: {
  prototype: ZeaMenuSeparator;
  new (): ZeaMenuSeparator;
};

interface ZeaMenuSubitems extends Components.ZeaMenuSubitems, HTMLElement {}
export const ZeaMenuSubitems: {
  prototype: ZeaMenuSubitems;
  new (): ZeaMenuSubitems;
};

interface ZeaNavigationDrawer extends Components.ZeaNavigationDrawer, HTMLElement {}
export const ZeaNavigationDrawer: {
  prototype: ZeaNavigationDrawer;
  new (): ZeaNavigationDrawer;
};

interface ZeaPanelProgressBar extends Components.ZeaPanelProgressBar, HTMLElement {}
export const ZeaPanelProgressBar: {
  prototype: ZeaPanelProgressBar;
  new (): ZeaPanelProgressBar;
};

interface ZeaParamWidgetBbox extends Components.ZeaParamWidgetBbox, HTMLElement {}
export const ZeaParamWidgetBbox: {
  prototype: ZeaParamWidgetBbox;
  new (): ZeaParamWidgetBbox;
};

interface ZeaParamWidgetBoolean extends Components.ZeaParamWidgetBoolean, HTMLElement {}
export const ZeaParamWidgetBoolean: {
  prototype: ZeaParamWidgetBoolean;
  new (): ZeaParamWidgetBoolean;
};

interface ZeaParamWidgetCode extends Components.ZeaParamWidgetCode, HTMLElement {}
export const ZeaParamWidgetCode: {
  prototype: ZeaParamWidgetCode;
  new (): ZeaParamWidgetCode;
};

interface ZeaParamWidgetColor extends Components.ZeaParamWidgetColor, HTMLElement {}
export const ZeaParamWidgetColor: {
  prototype: ZeaParamWidgetColor;
  new (): ZeaParamWidgetColor;
};

interface ZeaParamWidgetMaterialColor extends Components.ZeaParamWidgetMaterialColor, HTMLElement {}
export const ZeaParamWidgetMaterialColor: {
  prototype: ZeaParamWidgetMaterialColor;
  new (): ZeaParamWidgetMaterialColor;
};

interface ZeaParamWidgetNumber extends Components.ZeaParamWidgetNumber, HTMLElement {}
export const ZeaParamWidgetNumber: {
  prototype: ZeaParamWidgetNumber;
  new (): ZeaParamWidgetNumber;
};

interface ZeaParamWidgetString extends Components.ZeaParamWidgetString, HTMLElement {}
export const ZeaParamWidgetString: {
  prototype: ZeaParamWidgetString;
  new (): ZeaParamWidgetString;
};

interface ZeaParamWidgetVec2 extends Components.ZeaParamWidgetVec2, HTMLElement {}
export const ZeaParamWidgetVec2: {
  prototype: ZeaParamWidgetVec2;
  new (): ZeaParamWidgetVec2;
};

interface ZeaParamWidgetVec3 extends Components.ZeaParamWidgetVec3, HTMLElement {}
export const ZeaParamWidgetVec3: {
  prototype: ZeaParamWidgetVec3;
  new (): ZeaParamWidgetVec3;
};

interface ZeaParamWidgetVec4 extends Components.ZeaParamWidgetVec4, HTMLElement {}
export const ZeaParamWidgetVec4: {
  prototype: ZeaParamWidgetVec4;
  new (): ZeaParamWidgetVec4;
};

interface ZeaParamWidgetXfo extends Components.ZeaParamWidgetXfo, HTMLElement {}
export const ZeaParamWidgetXfo: {
  prototype: ZeaParamWidgetXfo;
  new (): ZeaParamWidgetXfo;
};

interface ZeaParameterContainer extends Components.ZeaParameterContainer, HTMLElement {}
export const ZeaParameterContainer: {
  prototype: ZeaParameterContainer;
  new (): ZeaParameterContainer;
};

interface ZeaPopupMenu extends Components.ZeaPopupMenu, HTMLElement {}
export const ZeaPopupMenu: {
  prototype: ZeaPopupMenu;
  new (): ZeaPopupMenu;
};

interface ZeaPopupMenuItem extends Components.ZeaPopupMenuItem, HTMLElement {}
export const ZeaPopupMenuItem: {
  prototype: ZeaPopupMenuItem;
  new (): ZeaPopupMenuItem;
};

interface ZeaProgressBar extends Components.ZeaProgressBar, HTMLElement {}
export const ZeaProgressBar: {
  prototype: ZeaProgressBar;
  new (): ZeaProgressBar;
};

interface ZeaQrCode extends Components.ZeaQrCode, HTMLElement {}
export const ZeaQrCode: {
  prototype: ZeaQrCode;
  new (): ZeaQrCode;
};

interface ZeaScrollPane extends Components.ZeaScrollPane, HTMLElement {}
export const ZeaScrollPane: {
  prototype: ZeaScrollPane;
  new (): ZeaScrollPane;
};

interface ZeaSwitch extends Components.ZeaSwitch, HTMLElement {}
export const ZeaSwitch: {
  prototype: ZeaSwitch;
  new (): ZeaSwitch;
};

interface ZeaTabs extends Components.ZeaTabs, HTMLElement {}
export const ZeaTabs: {
  prototype: ZeaTabs;
  new (): ZeaTabs;
};

interface ZeaToolbar extends Components.ZeaToolbar, HTMLElement {}
export const ZeaToolbar: {
  prototype: ZeaToolbar;
  new (): ZeaToolbar;
};

interface ZeaToolbarColorpicker extends Components.ZeaToolbarColorpicker, HTMLElement {}
export const ZeaToolbarColorpicker: {
  prototype: ZeaToolbarColorpicker;
  new (): ZeaToolbarColorpicker;
};

interface ZeaToolbarTool extends Components.ZeaToolbarTool, HTMLElement {}
export const ZeaToolbarTool: {
  prototype: ZeaToolbarTool;
  new (): ZeaToolbarTool;
};

interface ZeaToolbarToolset extends Components.ZeaToolbarToolset, HTMLElement {}
export const ZeaToolbarToolset: {
  prototype: ZeaToolbarToolset;
  new (): ZeaToolbarToolset;
};

interface ZeaTreeItemElement extends Components.ZeaTreeItemElement, HTMLElement {}
export const ZeaTreeItemElement: {
  prototype: ZeaTreeItemElement;
  new (): ZeaTreeItemElement;
};

interface ZeaTreeView extends Components.ZeaTreeView, HTMLElement {}
export const ZeaTreeView: {
  prototype: ZeaTreeView;
  new (): ZeaTreeView;
};

interface ZeaUserCard extends Components.ZeaUserCard, HTMLElement {}
export const ZeaUserCard: {
  prototype: ZeaUserCard;
  new (): ZeaUserCard;
};

interface ZeaUserChip extends Components.ZeaUserChip, HTMLElement {}
export const ZeaUserChip: {
  prototype: ZeaUserChip;
  new (): ZeaUserChip;
};

interface ZeaUserChipSet extends Components.ZeaUserChipSet, HTMLElement {}
export const ZeaUserChipSet: {
  prototype: ZeaUserChipSet;
  new (): ZeaUserChipSet;
};

/**
 * Utility to define all custom elements within this package using the tag name provided in the component's source. 
 * When defining each custom element, it will also check it's safe to define by:
 *
 * 1. Ensuring the "customElements" registry is available in the global context (window).
 * 2. The component tag name is not already defined.
 *
 * Use the standard [customElements.define()](https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/define) 
 * method instead to define custom elements individually, or to provide a different tag name.
 */
export declare const defineCustomElements: (opts?: any) => void;

/**
 * Used to manually set the base path where assets can be found.
 * If the script is used as "module", it's recommended to use "import.meta.url",
 * such as "setAssetPath(import.meta.url)". Other options include
 * "setAssetPath(document.currentScript.src)", or using a bundler's replace plugin to
 * dynamically set the path at build time, such as "setAssetPath(process.env.ASSET_PATH)".
 * But do note that this configuration depends on how your script is bundled, or lack of
 * bunding, and where your assets can be loaded from. Additionally custom bundling
 * will have to ensure the static assets are copied to its build directory.
 */
export declare const setAssetPath: (path: string) => void;

export { Components, JSX };

export * from '../types';
