const t=new class{constructor(){this.treeItemFactories=[],this.widgetFactories=[],this.inspectorFactories=[]}registerInpector(t,e){this.inspectorFactories.push({inspector:t,rule:e})}constructInspector(...t){const e=t[0];for(let r=this.inspectorFactories.length;r-- >0;){const s=this.inspectorFactories[r];if(s.rule(e))return new s.inspector(...t)}console.warn(`Inspector factory not found for parameter '${e.getName()}' of class '${e.constructor.name}'`)}registerTreeItemElement(t,e){this.treeItemFactories.push({treeItemElement:t,rule:e})}constructTreeItemElement(...t){const e=t[0];for(let r=this.treeItemFactories.length;r-- >0;){const s=this.treeItemFactories[r];if(s.rule(e))return new s.treeItemElement(...t)}console.warn(`Tree item factory not found for parameter '${e.getName()}' of class '${e.constructor.name}'`)}registerWidget(t,e){this.widgetFactories.push({widget:t,rule:e})}findWidgetReg(t){for(let e=this.widgetFactories.length;e-- >0;){const r=this.widgetFactories[e];if(r.rule(t))return r}}constructWidget(...t){const e=t[0];for(let r=this.widgetFactories.length;r-- >0;){const s=this.widgetFactories[r];if(s.rule(e))return new s.widget(...t)}console.warn(`Widget factory not found for parameter '${e.getName()}' of class '${e.constructor.name}'`)}};export{t as u}